
code-mcu.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009ce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00802000  000009ce  00000a62  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  00802016  00802016  00000a78  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a78  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000aa8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f0  00000000  00000000  00000ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000833c  00000000  00000000  00000cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000033e4  00000000  00000000  00009014  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004674  00000000  00000000  0000c3f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006b4  00000000  00000000  00010a6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0002821e  00000000  00000000  00011120  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000021dd  00000000  00000000  0003933e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d8  00000000  00000000  0003b51b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000091e7  00000000  00000000  0003b6f3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	bb c0       	rjmp	.+374    	; 0x178 <__ctors_end>
   2:	00 00       	nop
   4:	d4 c0       	rjmp	.+424    	; 0x1ae <__bad_interrupt>
   6:	00 00       	nop
   8:	d2 c0       	rjmp	.+420    	; 0x1ae <__bad_interrupt>
   a:	00 00       	nop
   c:	d0 c0       	rjmp	.+416    	; 0x1ae <__bad_interrupt>
   e:	00 00       	nop
  10:	ce c0       	rjmp	.+412    	; 0x1ae <__bad_interrupt>
  12:	00 00       	nop
  14:	cc c0       	rjmp	.+408    	; 0x1ae <__bad_interrupt>
  16:	00 00       	nop
  18:	ca c0       	rjmp	.+404    	; 0x1ae <__bad_interrupt>
  1a:	00 00       	nop
  1c:	c8 c0       	rjmp	.+400    	; 0x1ae <__bad_interrupt>
  1e:	00 00       	nop
  20:	c6 c0       	rjmp	.+396    	; 0x1ae <__bad_interrupt>
  22:	00 00       	nop
  24:	c4 c0       	rjmp	.+392    	; 0x1ae <__bad_interrupt>
  26:	00 00       	nop
  28:	c2 c0       	rjmp	.+388    	; 0x1ae <__bad_interrupt>
  2a:	00 00       	nop
  2c:	c0 c0       	rjmp	.+384    	; 0x1ae <__bad_interrupt>
  2e:	00 00       	nop
  30:	be c0       	rjmp	.+380    	; 0x1ae <__bad_interrupt>
  32:	00 00       	nop
  34:	4c c2       	rjmp	.+1176   	; 0x4ce <__vector_13>
  36:	00 00       	nop
  38:	ba c0       	rjmp	.+372    	; 0x1ae <__bad_interrupt>
  3a:	00 00       	nop
  3c:	b8 c0       	rjmp	.+368    	; 0x1ae <__bad_interrupt>
  3e:	00 00       	nop
  40:	b6 c0       	rjmp	.+364    	; 0x1ae <__bad_interrupt>
  42:	00 00       	nop
  44:	b4 c0       	rjmp	.+360    	; 0x1ae <__bad_interrupt>
  46:	00 00       	nop
  48:	b2 c0       	rjmp	.+356    	; 0x1ae <__bad_interrupt>
  4a:	00 00       	nop
  4c:	b0 c0       	rjmp	.+352    	; 0x1ae <__bad_interrupt>
  4e:	00 00       	nop
  50:	ae c0       	rjmp	.+348    	; 0x1ae <__bad_interrupt>
  52:	00 00       	nop
  54:	ac c0       	rjmp	.+344    	; 0x1ae <__bad_interrupt>
  56:	00 00       	nop
  58:	aa c0       	rjmp	.+340    	; 0x1ae <__bad_interrupt>
  5a:	00 00       	nop
  5c:	a8 c0       	rjmp	.+336    	; 0x1ae <__bad_interrupt>
  5e:	00 00       	nop
  60:	a6 c0       	rjmp	.+332    	; 0x1ae <__bad_interrupt>
  62:	00 00       	nop
  64:	a4 c0       	rjmp	.+328    	; 0x1ae <__bad_interrupt>
  66:	00 00       	nop
  68:	a2 c0       	rjmp	.+324    	; 0x1ae <__bad_interrupt>
  6a:	00 00       	nop
  6c:	a0 c0       	rjmp	.+320    	; 0x1ae <__bad_interrupt>
  6e:	00 00       	nop
  70:	9e c0       	rjmp	.+316    	; 0x1ae <__bad_interrupt>
  72:	00 00       	nop
  74:	9c c0       	rjmp	.+312    	; 0x1ae <__bad_interrupt>
  76:	00 00       	nop
  78:	9a c0       	rjmp	.+308    	; 0x1ae <__bad_interrupt>
  7a:	00 00       	nop
  7c:	98 c0       	rjmp	.+304    	; 0x1ae <__bad_interrupt>
  7e:	00 00       	nop
  80:	96 c0       	rjmp	.+300    	; 0x1ae <__bad_interrupt>
  82:	00 00       	nop
  84:	94 c0       	rjmp	.+296    	; 0x1ae <__bad_interrupt>
  86:	00 00       	nop
  88:	92 c0       	rjmp	.+292    	; 0x1ae <__bad_interrupt>
  8a:	00 00       	nop
  8c:	90 c0       	rjmp	.+288    	; 0x1ae <__bad_interrupt>
  8e:	00 00       	nop
  90:	8e c0       	rjmp	.+284    	; 0x1ae <__bad_interrupt>
  92:	00 00       	nop
  94:	8c c0       	rjmp	.+280    	; 0x1ae <__bad_interrupt>
  96:	00 00       	nop
  98:	8a c0       	rjmp	.+276    	; 0x1ae <__bad_interrupt>
  9a:	00 00       	nop
  9c:	88 c0       	rjmp	.+272    	; 0x1ae <__bad_interrupt>
  9e:	00 00       	nop
  a0:	86 c0       	rjmp	.+268    	; 0x1ae <__bad_interrupt>
  a2:	00 00       	nop
  a4:	84 c0       	rjmp	.+264    	; 0x1ae <__bad_interrupt>
  a6:	00 00       	nop
  a8:	82 c0       	rjmp	.+260    	; 0x1ae <__bad_interrupt>
  aa:	00 00       	nop
  ac:	80 c0       	rjmp	.+256    	; 0x1ae <__bad_interrupt>
  ae:	00 00       	nop
  b0:	7e c0       	rjmp	.+252    	; 0x1ae <__bad_interrupt>
  b2:	00 00       	nop
  b4:	7c c0       	rjmp	.+248    	; 0x1ae <__bad_interrupt>
  b6:	00 00       	nop
  b8:	2d c2       	rjmp	.+1114   	; 0x514 <__vector_46>
  ba:	00 00       	nop
  bc:	78 c0       	rjmp	.+240    	; 0x1ae <__bad_interrupt>
  be:	00 00       	nop
  c0:	76 c0       	rjmp	.+236    	; 0x1ae <__bad_interrupt>
  c2:	00 00       	nop
  c4:	74 c0       	rjmp	.+232    	; 0x1ae <__bad_interrupt>
  c6:	00 00       	nop
  c8:	72 c0       	rjmp	.+228    	; 0x1ae <__bad_interrupt>
  ca:	00 00       	nop
  cc:	70 c0       	rjmp	.+224    	; 0x1ae <__bad_interrupt>
  ce:	00 00       	nop
  d0:	6e c0       	rjmp	.+220    	; 0x1ae <__bad_interrupt>
  d2:	00 00       	nop
  d4:	6c c0       	rjmp	.+216    	; 0x1ae <__bad_interrupt>
  d6:	00 00       	nop
  d8:	6a c0       	rjmp	.+212    	; 0x1ae <__bad_interrupt>
  da:	00 00       	nop
  dc:	68 c0       	rjmp	.+208    	; 0x1ae <__bad_interrupt>
  de:	00 00       	nop
  e0:	66 c0       	rjmp	.+204    	; 0x1ae <__bad_interrupt>
  e2:	00 00       	nop
  e4:	64 c0       	rjmp	.+200    	; 0x1ae <__bad_interrupt>
  e6:	00 00       	nop
  e8:	62 c0       	rjmp	.+196    	; 0x1ae <__bad_interrupt>
  ea:	00 00       	nop
  ec:	60 c0       	rjmp	.+192    	; 0x1ae <__bad_interrupt>
  ee:	00 00       	nop
  f0:	5e c0       	rjmp	.+188    	; 0x1ae <__bad_interrupt>
  f2:	00 00       	nop
  f4:	5c c0       	rjmp	.+184    	; 0x1ae <__bad_interrupt>
  f6:	00 00       	nop
  f8:	5a c0       	rjmp	.+180    	; 0x1ae <__bad_interrupt>
  fa:	00 00       	nop
  fc:	58 c0       	rjmp	.+176    	; 0x1ae <__bad_interrupt>
  fe:	00 00       	nop
 100:	56 c0       	rjmp	.+172    	; 0x1ae <__bad_interrupt>
 102:	00 00       	nop
 104:	54 c0       	rjmp	.+168    	; 0x1ae <__bad_interrupt>
 106:	00 00       	nop
 108:	52 c0       	rjmp	.+164    	; 0x1ae <__bad_interrupt>
 10a:	00 00       	nop
 10c:	50 c0       	rjmp	.+160    	; 0x1ae <__bad_interrupt>
 10e:	00 00       	nop
 110:	4e c0       	rjmp	.+156    	; 0x1ae <__bad_interrupt>
 112:	00 00       	nop
 114:	4c c0       	rjmp	.+152    	; 0x1ae <__bad_interrupt>
 116:	00 00       	nop
 118:	4a c0       	rjmp	.+148    	; 0x1ae <__bad_interrupt>
 11a:	00 00       	nop
 11c:	89 c0       	rjmp	.+274    	; 0x230 <__vector_71>
 11e:	00 00       	nop
 120:	b5 c0       	rjmp	.+362    	; 0x28c <__vector_72>
 122:	00 00       	nop
 124:	e1 c0       	rjmp	.+450    	; 0x2e8 <__vector_73>
 126:	00 00       	nop
 128:	0d c1       	rjmp	.+538    	; 0x344 <__vector_74>
 12a:	00 00       	nop
 12c:	40 c0       	rjmp	.+128    	; 0x1ae <__bad_interrupt>
 12e:	00 00       	nop
 130:	3e c0       	rjmp	.+124    	; 0x1ae <__bad_interrupt>
 132:	00 00       	nop
 134:	3c c0       	rjmp	.+120    	; 0x1ae <__bad_interrupt>
 136:	00 00       	nop
 138:	3a c0       	rjmp	.+116    	; 0x1ae <__bad_interrupt>
 13a:	00 00       	nop
 13c:	38 c0       	rjmp	.+112    	; 0x1ae <__bad_interrupt>
 13e:	00 00       	nop
 140:	36 c0       	rjmp	.+108    	; 0x1ae <__bad_interrupt>
 142:	00 00       	nop
 144:	34 c0       	rjmp	.+104    	; 0x1ae <__bad_interrupt>
 146:	00 00       	nop
 148:	32 c0       	rjmp	.+100    	; 0x1ae <__bad_interrupt>
 14a:	00 00       	nop
 14c:	30 c0       	rjmp	.+96     	; 0x1ae <__bad_interrupt>
 14e:	00 00       	nop
 150:	2e c0       	rjmp	.+92     	; 0x1ae <__bad_interrupt>
 152:	00 00       	nop
 154:	2c c0       	rjmp	.+88     	; 0x1ae <__bad_interrupt>
 156:	00 00       	nop
 158:	2a c0       	rjmp	.+84     	; 0x1ae <__bad_interrupt>
 15a:	00 00       	nop
 15c:	28 c0       	rjmp	.+80     	; 0x1ae <__bad_interrupt>
 15e:	00 00       	nop
 160:	26 c0       	rjmp	.+76     	; 0x1ae <__bad_interrupt>
 162:	00 00       	nop
 164:	24 c0       	rjmp	.+72     	; 0x1ae <__bad_interrupt>
 166:	00 00       	nop
 168:	22 c0       	rjmp	.+68     	; 0x1ae <__bad_interrupt>
 16a:	00 00       	nop
 16c:	20 c0       	rjmp	.+64     	; 0x1ae <__bad_interrupt>
 16e:	00 00       	nop
 170:	1e c0       	rjmp	.+60     	; 0x1ae <__bad_interrupt>
 172:	00 00       	nop
 174:	1c c0       	rjmp	.+56     	; 0x1ae <__bad_interrupt>
	...

00000178 <__ctors_end>:
 178:	11 24       	eor	r1, r1
 17a:	1f be       	out	0x3f, r1	; 63
 17c:	cf ef       	ldi	r28, 0xFF	; 255
 17e:	cd bf       	out	0x3d, r28	; 61
 180:	d7 e2       	ldi	r29, 0x27	; 39
 182:	de bf       	out	0x3e, r29	; 62

00000184 <__do_copy_data>:
 184:	10 e2       	ldi	r17, 0x20	; 32
 186:	a0 e0       	ldi	r26, 0x00	; 0
 188:	b0 e2       	ldi	r27, 0x20	; 32
 18a:	ee ec       	ldi	r30, 0xCE	; 206
 18c:	f9 e0       	ldi	r31, 0x09	; 9
 18e:	02 c0       	rjmp	.+4      	; 0x194 <__do_copy_data+0x10>
 190:	05 90       	lpm	r0, Z+
 192:	0d 92       	st	X+, r0
 194:	a6 31       	cpi	r26, 0x16	; 22
 196:	b1 07       	cpc	r27, r17
 198:	d9 f7       	brne	.-10     	; 0x190 <__do_copy_data+0xc>

0000019a <__do_clear_bss>:
 19a:	20 e2       	ldi	r18, 0x20	; 32
 19c:	a6 e1       	ldi	r26, 0x16	; 22
 19e:	b0 e2       	ldi	r27, 0x20	; 32
 1a0:	01 c0       	rjmp	.+2      	; 0x1a4 <.do_clear_bss_start>

000001a2 <.do_clear_bss_loop>:
 1a2:	1d 92       	st	X+, r1

000001a4 <.do_clear_bss_start>:
 1a4:	a3 32       	cpi	r26, 0x23	; 35
 1a6:	b2 07       	cpc	r27, r18
 1a8:	e1 f7       	brne	.-8      	; 0x1a2 <.do_clear_bss_loop>
 1aa:	da d3       	rcall	.+1972   	; 0x960 <main>
 1ac:	0e c4       	rjmp	.+2076   	; 0x9ca <_exit>

000001ae <__bad_interrupt>:
 1ae:	28 cf       	rjmp	.-432    	; 0x0 <__vectors>

000001b0 <USARTS_inits>:

void USARTS_inits(void)
{
	
	//Enabling system port clocks
	sysclk_enable_module(SYSCLK_PORT_C, PR_USART0_bm); //Enable USARTC0 clock
 1b0:	60 e1       	ldi	r22, 0x10	; 16
 1b2:	83 e0       	ldi	r24, 0x03	; 3
 1b4:	27 d0       	rcall	.+78     	; 0x204 <sysclk_enable_module>
	usart_init_rs232(USART_SERIAL_WIFI, &USART_WIFI); //Enable RS232 mode
 1b6:	6e e0       	ldi	r22, 0x0E	; 14
 1b8:	70 e2       	ldi	r23, 0x20	; 32
 1ba:	80 ea       	ldi	r24, 0xA0	; 160
 1bc:	98 e0       	ldi	r25, 0x08	; 8
 1be:	dc d2       	rcall	.+1464   	; 0x778 <usart_init_rs232>

	sysclk_enable_module(SYSCLK_PORT_D, PR_USART0_bm); //Enable USARTD0 clock
 1c0:	60 e1       	ldi	r22, 0x10	; 16
 1c2:	84 e0       	ldi	r24, 0x04	; 4
 1c4:	1f d0       	rcall	.+62     	; 0x204 <sysclk_enable_module>
	usart_init_rs232(USART_SERIAL_SIM, &USART_SIM); //Enable RS232 mode
 1c6:	67 e0       	ldi	r22, 0x07	; 7
 1c8:	70 e2       	ldi	r23, 0x20	; 32
 1ca:	80 ea       	ldi	r24, 0xA0	; 160
 1cc:	99 e0       	ldi	r25, 0x09	; 9

	sysclk_enable_module(SYSCLK_PORT_E, PR_USART0_bm); //Enable USARTE0 clock
 1ce:	d4 d2       	rcall	.+1448   	; 0x778 <usart_init_rs232>
 1d0:	60 e1       	ldi	r22, 0x10	; 16
 1d2:	85 e0       	ldi	r24, 0x05	; 5
	usart_init_rs232(USART_SERIAL_COM, &USART_COM); //Enable RS232 mode
 1d4:	17 d0       	rcall	.+46     	; 0x204 <sysclk_enable_module>
 1d6:	60 e0       	ldi	r22, 0x00	; 0
 1d8:	70 e2       	ldi	r23, 0x20	; 32
 1da:	80 ea       	ldi	r24, 0xA0	; 160
 1dc:	9a e0       	ldi	r25, 0x0A	; 10
 1de:	cc c2       	rjmp	.+1432   	; 0x778 <usart_init_rs232>
 1e0:	08 95       	ret

000001e2 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
 1e2:	08 95       	ret

000001e4 <sysclk_init>:
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
 1e4:	8f ef       	ldi	r24, 0xFF	; 255
 1e6:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
 1ea:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
 1ee:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
 1f2:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
 1f6:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
 1fa:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
 1fe:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>
 202:	08 95       	ret

00000204 <sysclk_enable_module>:
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
 204:	cf 93       	push	r28
 206:	df 93       	push	r29
 208:	1f 92       	push	r1
 20a:	cd b7       	in	r28, 0x3d	; 61
 20c:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
 20e:	9f b7       	in	r25, 0x3f	; 63
 210:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
 212:	f8 94       	cli
	return flags;
 214:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
 216:	e8 2f       	mov	r30, r24
 218:	f0 e0       	ldi	r31, 0x00	; 0
 21a:	e0 59       	subi	r30, 0x90	; 144
 21c:	ff 4f       	sbci	r31, 0xFF	; 255
 21e:	60 95       	com	r22
 220:	80 81       	ld	r24, Z
 222:	68 23       	and	r22, r24
 224:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 226:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
 228:	0f 90       	pop	r0
 22a:	df 91       	pop	r29
 22c:	cf 91       	pop	r28
 22e:	08 95       	ret

00000230 <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
 230:	1f 92       	push	r1
 232:	0f 92       	push	r0
 234:	0f b6       	in	r0, 0x3f	; 63
 236:	0f 92       	push	r0
 238:	11 24       	eor	r1, r1
 23a:	2f 93       	push	r18
 23c:	3f 93       	push	r19
 23e:	4f 93       	push	r20
 240:	5f 93       	push	r21
 242:	6f 93       	push	r22
 244:	7f 93       	push	r23
 246:	8f 93       	push	r24
 248:	9f 93       	push	r25
 24a:	af 93       	push	r26
 24c:	bf 93       	push	r27
 24e:	ef 93       	push	r30
 250:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
 252:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
 256:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
 25a:	e0 91 21 20 	lds	r30, 0x2021	; 0x802021 <adca_callback>
 25e:	f0 91 22 20 	lds	r31, 0x2022	; 0x802022 <adca_callback+0x1>
 262:	61 e0       	ldi	r22, 0x01	; 1
 264:	80 e0       	ldi	r24, 0x00	; 0
 266:	92 e0       	ldi	r25, 0x02	; 2
 268:	09 95       	icall
}
 26a:	ff 91       	pop	r31
 26c:	ef 91       	pop	r30
 26e:	bf 91       	pop	r27
 270:	af 91       	pop	r26
 272:	9f 91       	pop	r25
 274:	8f 91       	pop	r24
 276:	7f 91       	pop	r23
 278:	6f 91       	pop	r22
 27a:	5f 91       	pop	r21
 27c:	4f 91       	pop	r20
 27e:	3f 91       	pop	r19
 280:	2f 91       	pop	r18
 282:	0f 90       	pop	r0
 284:	0f be       	out	0x3f, r0	; 63
 286:	0f 90       	pop	r0
 288:	1f 90       	pop	r1
 28a:	18 95       	reti

0000028c <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
 28c:	1f 92       	push	r1
 28e:	0f 92       	push	r0
 290:	0f b6       	in	r0, 0x3f	; 63
 292:	0f 92       	push	r0
 294:	11 24       	eor	r1, r1
 296:	2f 93       	push	r18
 298:	3f 93       	push	r19
 29a:	4f 93       	push	r20
 29c:	5f 93       	push	r21
 29e:	6f 93       	push	r22
 2a0:	7f 93       	push	r23
 2a2:	8f 93       	push	r24
 2a4:	9f 93       	push	r25
 2a6:	af 93       	push	r26
 2a8:	bf 93       	push	r27
 2aa:	ef 93       	push	r30
 2ac:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
 2ae:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
 2b2:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
 2b6:	e0 91 21 20 	lds	r30, 0x2021	; 0x802021 <adca_callback>
 2ba:	f0 91 22 20 	lds	r31, 0x2022	; 0x802022 <adca_callback+0x1>
 2be:	62 e0       	ldi	r22, 0x02	; 2
 2c0:	80 e0       	ldi	r24, 0x00	; 0
 2c2:	92 e0       	ldi	r25, 0x02	; 2
 2c4:	09 95       	icall
}
 2c6:	ff 91       	pop	r31
 2c8:	ef 91       	pop	r30
 2ca:	bf 91       	pop	r27
 2cc:	af 91       	pop	r26
 2ce:	9f 91       	pop	r25
 2d0:	8f 91       	pop	r24
 2d2:	7f 91       	pop	r23
 2d4:	6f 91       	pop	r22
 2d6:	5f 91       	pop	r21
 2d8:	4f 91       	pop	r20
 2da:	3f 91       	pop	r19
 2dc:	2f 91       	pop	r18
 2de:	0f 90       	pop	r0
 2e0:	0f be       	out	0x3f, r0	; 63
 2e2:	0f 90       	pop	r0
 2e4:	1f 90       	pop	r1
 2e6:	18 95       	reti

000002e8 <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
 2e8:	1f 92       	push	r1
 2ea:	0f 92       	push	r0
 2ec:	0f b6       	in	r0, 0x3f	; 63
 2ee:	0f 92       	push	r0
 2f0:	11 24       	eor	r1, r1
 2f2:	2f 93       	push	r18
 2f4:	3f 93       	push	r19
 2f6:	4f 93       	push	r20
 2f8:	5f 93       	push	r21
 2fa:	6f 93       	push	r22
 2fc:	7f 93       	push	r23
 2fe:	8f 93       	push	r24
 300:	9f 93       	push	r25
 302:	af 93       	push	r26
 304:	bf 93       	push	r27
 306:	ef 93       	push	r30
 308:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
 30a:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
 30e:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
 312:	e0 91 21 20 	lds	r30, 0x2021	; 0x802021 <adca_callback>
 316:	f0 91 22 20 	lds	r31, 0x2022	; 0x802022 <adca_callback+0x1>
 31a:	64 e0       	ldi	r22, 0x04	; 4
 31c:	80 e0       	ldi	r24, 0x00	; 0
 31e:	92 e0       	ldi	r25, 0x02	; 2
 320:	09 95       	icall
}
 322:	ff 91       	pop	r31
 324:	ef 91       	pop	r30
 326:	bf 91       	pop	r27
 328:	af 91       	pop	r26
 32a:	9f 91       	pop	r25
 32c:	8f 91       	pop	r24
 32e:	7f 91       	pop	r23
 330:	6f 91       	pop	r22
 332:	5f 91       	pop	r21
 334:	4f 91       	pop	r20
 336:	3f 91       	pop	r19
 338:	2f 91       	pop	r18
 33a:	0f 90       	pop	r0
 33c:	0f be       	out	0x3f, r0	; 63
 33e:	0f 90       	pop	r0
 340:	1f 90       	pop	r1
 342:	18 95       	reti

00000344 <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
 344:	1f 92       	push	r1
 346:	0f 92       	push	r0
 348:	0f b6       	in	r0, 0x3f	; 63
 34a:	0f 92       	push	r0
 34c:	11 24       	eor	r1, r1
 34e:	2f 93       	push	r18
 350:	3f 93       	push	r19
 352:	4f 93       	push	r20
 354:	5f 93       	push	r21
 356:	6f 93       	push	r22
 358:	7f 93       	push	r23
 35a:	8f 93       	push	r24
 35c:	9f 93       	push	r25
 35e:	af 93       	push	r26
 360:	bf 93       	push	r27
 362:	ef 93       	push	r30
 364:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
 366:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
 36a:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
 36e:	e0 91 21 20 	lds	r30, 0x2021	; 0x802021 <adca_callback>
 372:	f0 91 22 20 	lds	r31, 0x2022	; 0x802022 <adca_callback+0x1>
 376:	68 e0       	ldi	r22, 0x08	; 8
 378:	80 e0       	ldi	r24, 0x00	; 0
 37a:	92 e0       	ldi	r25, 0x02	; 2
 37c:	09 95       	icall
}
 37e:	ff 91       	pop	r31
 380:	ef 91       	pop	r30
 382:	bf 91       	pop	r27
 384:	af 91       	pop	r26
 386:	9f 91       	pop	r25
 388:	8f 91       	pop	r24
 38a:	7f 91       	pop	r23
 38c:	6f 91       	pop	r22
 38e:	5f 91       	pop	r21
 390:	4f 91       	pop	r20
 392:	3f 91       	pop	r19
 394:	2f 91       	pop	r18
 396:	0f 90       	pop	r0
 398:	0f be       	out	0x3f, r0	; 63
 39a:	0f 90       	pop	r0
 39c:	1f 90       	pop	r1
 39e:	18 95       	reti

000003a0 <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
 3a0:	cf 93       	push	r28
 3a2:	df 93       	push	r29
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
 3a4:	e0 91 16 20 	lds	r30, 0x2016	; 0x802016 <__data_end>
 3a8:	f0 91 17 20 	lds	r31, 0x2017	; 0x802017 <__data_end+0x1>
 3ac:	84 81       	ldd	r24, Z+4	; 0x04

	if (master_status & TWI_MASTER_ARBLOST_bm) {
 3ae:	83 ff       	sbrs	r24, 3
 3b0:	08 c0       	rjmp	.+16     	; 0x3c2 <twim_interrupt_handler+0x22>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
 3b2:	88 60       	ori	r24, 0x08	; 8
 3b4:	84 83       	std	Z+4, r24	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
 3b6:	83 e0       	ldi	r24, 0x03	; 3
 3b8:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_BUSY;
 3ba:	86 ef       	ldi	r24, 0xF6	; 246
 3bc:	80 93 20 20 	sts	0x2020, r24	; 0x802020 <__data_end+0xa>
 3c0:	83 c0       	rjmp	.+262    	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
 3c2:	98 2f       	mov	r25, r24
 3c4:	94 71       	andi	r25, 0x14	; 20
 3c6:	31 f0       	breq	.+12     	; 0x3d4 <twim_interrupt_handler+0x34>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
 3c8:	83 e0       	ldi	r24, 0x03	; 3
 3ca:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_IO_ERROR;
 3cc:	8f ef       	ldi	r24, 0xFF	; 255
 3ce:	80 93 20 20 	sts	0x2020, r24	; 0x802020 <__data_end+0xa>
 3d2:	7a c0       	rjmp	.+244    	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>

	} else if (master_status & TWI_MASTER_WIF_bm) {
 3d4:	86 ff       	sbrs	r24, 6
 3d6:	43 c0       	rjmp	.+134    	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
 3d8:	c6 e1       	ldi	r28, 0x16	; 22
 3da:	d0 e2       	ldi	r29, 0x20	; 32
 3dc:	aa 81       	ldd	r26, Y+2	; 0x02
 3de:	bb 81       	ldd	r27, Y+3	; 0x03

	if (transfer.addr_count < pkg->addr_length) {
 3e0:	8c 81       	ldd	r24, Y+4	; 0x04
 3e2:	9d 81       	ldd	r25, Y+5	; 0x05
 3e4:	14 96       	adiw	r26, 0x04	; 4
 3e6:	2d 91       	ld	r18, X+
 3e8:	3c 91       	ld	r19, X
 3ea:	15 97       	sbiw	r26, 0x05	; 5
 3ec:	82 17       	cp	r24, r18
 3ee:	93 07       	cpc	r25, r19
 3f0:	6c f4       	brge	.+26     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];
 3f2:	9c 01       	movw	r18, r24
 3f4:	2f 5f       	subi	r18, 0xFF	; 255
 3f6:	3f 4f       	sbci	r19, 0xFF	; 255
 3f8:	20 93 1a 20 	sts	0x201A, r18	; 0x80201a <__data_end+0x4>
 3fc:	30 93 1b 20 	sts	0x201B, r19	; 0x80201b <__data_end+0x5>
 400:	a8 0f       	add	r26, r24
 402:	b9 1f       	adc	r27, r25
 404:	11 96       	adiw	r26, 0x01	; 1
 406:	8c 91       	ld	r24, X
 408:	87 83       	std	Z+7, r24	; 0x07
 40a:	5e c0       	rjmp	.+188    	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>

	} else if (transfer.data_count < pkg->length) {
 40c:	80 91 1c 20 	lds	r24, 0x201C	; 0x80201c <__data_end+0x6>
 410:	90 91 1d 20 	lds	r25, 0x201D	; 0x80201d <__data_end+0x7>
 414:	18 96       	adiw	r26, 0x08	; 8
 416:	2d 91       	ld	r18, X+
 418:	3c 91       	ld	r19, X
 41a:	19 97       	sbiw	r26, 0x09	; 9
 41c:	82 17       	cp	r24, r18
 41e:	93 07       	cpc	r25, r19
 420:	c8 f4       	brcc	.+50     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>

		if (transfer.read) {
 422:	20 91 1e 20 	lds	r18, 0x201E	; 0x80201e <__data_end+0x8>
 426:	22 23       	and	r18, r18
 428:	21 f0       	breq	.+8      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
 42a:	86 81       	ldd	r24, Z+6	; 0x06
 42c:	81 60       	ori	r24, 0x01	; 1
 42e:	86 83       	std	Z+6, r24	; 0x06
 430:	4b c0       	rjmp	.+150    	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>

		} else {
			const uint8_t * const data = pkg->buffer;
 432:	16 96       	adiw	r26, 0x06	; 6
 434:	2d 91       	ld	r18, X+
 436:	3c 91       	ld	r19, X
 438:	17 97       	sbiw	r26, 0x07	; 7
			bus->MASTER.DATA = data[transfer.data_count++];
 43a:	ac 01       	movw	r20, r24
 43c:	4f 5f       	subi	r20, 0xFF	; 255
 43e:	5f 4f       	sbci	r21, 0xFF	; 255
 440:	40 93 1c 20 	sts	0x201C, r20	; 0x80201c <__data_end+0x6>
 444:	50 93 1d 20 	sts	0x201D, r21	; 0x80201d <__data_end+0x7>
 448:	d9 01       	movw	r26, r18
 44a:	a8 0f       	add	r26, r24
 44c:	b9 1f       	adc	r27, r25
 44e:	8c 91       	ld	r24, X
 450:	87 83       	std	Z+7, r24	; 0x07
 452:	3a c0       	rjmp	.+116    	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
 454:	83 e0       	ldi	r24, 0x03	; 3
 456:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = STATUS_OK;
 458:	10 92 20 20 	sts	0x2020, r1	; 0x802020 <__data_end+0xa>
 45c:	35 c0       	rjmp	.+106    	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
 45e:	88 23       	and	r24, r24
 460:	84 f5       	brge	.+96     	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
 462:	a6 e1       	ldi	r26, 0x16	; 22
 464:	b0 e2       	ldi	r27, 0x20	; 32
 466:	12 96       	adiw	r26, 0x02	; 2
 468:	cd 91       	ld	r28, X+
 46a:	dc 91       	ld	r29, X
 46c:	13 97       	sbiw	r26, 0x03	; 3

	if (transfer.data_count < pkg->length) {
 46e:	16 96       	adiw	r26, 0x06	; 6
 470:	8d 91       	ld	r24, X+
 472:	9c 91       	ld	r25, X
 474:	17 97       	sbiw	r26, 0x07	; 7
 476:	28 85       	ldd	r18, Y+8	; 0x08
 478:	39 85       	ldd	r19, Y+9	; 0x09
 47a:	82 17       	cp	r24, r18
 47c:	93 07       	cpc	r25, r19
 47e:	d8 f4       	brcc	.+54     	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>

		uint8_t * const data = pkg->buffer;
 480:	6e 81       	ldd	r22, Y+6	; 0x06
 482:	7f 81       	ldd	r23, Y+7	; 0x07
		data[transfer.data_count++] = bus->MASTER.DATA;
 484:	9c 01       	movw	r18, r24
 486:	2f 5f       	subi	r18, 0xFF	; 255
 488:	3f 4f       	sbci	r19, 0xFF	; 255
 48a:	20 93 1c 20 	sts	0x201C, r18	; 0x80201c <__data_end+0x6>
 48e:	30 93 1d 20 	sts	0x201D, r19	; 0x80201d <__data_end+0x7>
 492:	47 81       	ldd	r20, Z+7	; 0x07
 494:	db 01       	movw	r26, r22
 496:	a8 0f       	add	r26, r24
 498:	b9 1f       	adc	r27, r25
 49a:	4c 93       	st	X, r20

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
 49c:	88 85       	ldd	r24, Y+8	; 0x08
 49e:	99 85       	ldd	r25, Y+9	; 0x09
 4a0:	28 17       	cp	r18, r24
 4a2:	39 07       	cpc	r19, r25
 4a4:	18 f4       	brcc	.+6      	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
 4a6:	82 e0       	ldi	r24, 0x02	; 2
 4a8:	83 83       	std	Z+3, r24	; 0x03
 4aa:	0e c0       	rjmp	.+28     	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
 4ac:	87 e0       	ldi	r24, 0x07	; 7
 4ae:	83 83       	std	Z+3, r24	; 0x03
			transfer.status = STATUS_OK;
 4b0:	10 92 20 20 	sts	0x2020, r1	; 0x802020 <__data_end+0xa>
 4b4:	09 c0       	rjmp	.+18     	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
 4b6:	83 e0       	ldi	r24, 0x03	; 3
 4b8:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_NO_MEMORY;
 4ba:	89 ef       	ldi	r24, 0xF9	; 249
 4bc:	80 93 20 20 	sts	0x2020, r24	; 0x802020 <__data_end+0xa>
 4c0:	03 c0       	rjmp	.+6      	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
 4c2:	8b ef       	ldi	r24, 0xFB	; 251
 4c4:	80 93 20 20 	sts	0x2020, r24	; 0x802020 <__data_end+0xa>
	}
}
 4c8:	df 91       	pop	r29
 4ca:	cf 91       	pop	r28
 4cc:	08 95       	ret

000004ce <__vector_13>:
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
 4ce:	1f 92       	push	r1
 4d0:	0f 92       	push	r0
 4d2:	0f b6       	in	r0, 0x3f	; 63
 4d4:	0f 92       	push	r0
 4d6:	11 24       	eor	r1, r1
 4d8:	2f 93       	push	r18
 4da:	3f 93       	push	r19
 4dc:	4f 93       	push	r20
 4de:	5f 93       	push	r21
 4e0:	6f 93       	push	r22
 4e2:	7f 93       	push	r23
 4e4:	8f 93       	push	r24
 4e6:	9f 93       	push	r25
 4e8:	af 93       	push	r26
 4ea:	bf 93       	push	r27
 4ec:	ef 93       	push	r30
 4ee:	ff 93       	push	r31
 4f0:	57 df       	rcall	.-338    	; 0x3a0 <twim_interrupt_handler>
 4f2:	ff 91       	pop	r31
 4f4:	ef 91       	pop	r30
 4f6:	bf 91       	pop	r27
 4f8:	af 91       	pop	r26
 4fa:	9f 91       	pop	r25
 4fc:	8f 91       	pop	r24
 4fe:	7f 91       	pop	r23
 500:	6f 91       	pop	r22
 502:	5f 91       	pop	r21
 504:	4f 91       	pop	r20
 506:	3f 91       	pop	r19
 508:	2f 91       	pop	r18
 50a:	0f 90       	pop	r0
 50c:	0f be       	out	0x3f, r0	; 63
 50e:	0f 90       	pop	r0
 510:	1f 90       	pop	r1
 512:	18 95       	reti

00000514 <__vector_46>:
#endif
#ifdef TWID
ISR(TWID_TWIM_vect) { twim_interrupt_handler(); }
#endif
#ifdef TWIE
ISR(TWIE_TWIM_vect) { twim_interrupt_handler(); }
 514:	1f 92       	push	r1
 516:	0f 92       	push	r0
 518:	0f b6       	in	r0, 0x3f	; 63
 51a:	0f 92       	push	r0
 51c:	11 24       	eor	r1, r1
 51e:	2f 93       	push	r18
 520:	3f 93       	push	r19
 522:	4f 93       	push	r20
 524:	5f 93       	push	r21
 526:	6f 93       	push	r22
 528:	7f 93       	push	r23
 52a:	8f 93       	push	r24
 52c:	9f 93       	push	r25
 52e:	af 93       	push	r26
 530:	bf 93       	push	r27
 532:	ef 93       	push	r30
 534:	ff 93       	push	r31
 536:	34 df       	rcall	.-408    	; 0x3a0 <twim_interrupt_handler>
 538:	ff 91       	pop	r31
 53a:	ef 91       	pop	r30
 53c:	bf 91       	pop	r27
 53e:	af 91       	pop	r26
 540:	9f 91       	pop	r25
 542:	8f 91       	pop	r24
 544:	7f 91       	pop	r23
 546:	6f 91       	pop	r22
 548:	5f 91       	pop	r21
 54a:	4f 91       	pop	r20
 54c:	3f 91       	pop	r19
 54e:	2f 91       	pop	r18
 550:	0f 90       	pop	r0
 552:	0f be       	out	0x3f, r0	; 63
 554:	0f 90       	pop	r0
 556:	1f 90       	pop	r1
 558:	18 95       	reti

0000055a <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
 55a:	4f 92       	push	r4
 55c:	5f 92       	push	r5
 55e:	6f 92       	push	r6
 560:	7f 92       	push	r7
 562:	8f 92       	push	r8
 564:	9f 92       	push	r9
 566:	af 92       	push	r10
 568:	bf 92       	push	r11
 56a:	ef 92       	push	r14
 56c:	ff 92       	push	r15
 56e:	0f 93       	push	r16
 570:	1f 93       	push	r17
 572:	cf 93       	push	r28
 574:	7c 01       	movw	r14, r24
 576:	4a 01       	movw	r8, r20
 578:	5b 01       	movw	r10, r22
 57a:	28 01       	movw	r4, r16
 57c:	39 01       	movw	r6, r18
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
 57e:	fc 01       	movw	r30, r24
 580:	84 81       	ldd	r24, Z+4	; 0x04
 582:	82 ff       	sbrs	r24, 2
 584:	16 c0       	rjmp	.+44     	; 0x5b2 <usart_set_baudrate+0x58>

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
 586:	d9 01       	movw	r26, r18
 588:	c8 01       	movw	r24, r16
 58a:	68 94       	set
 58c:	12 f8       	bld	r1, 2
 58e:	b6 95       	lsr	r27
 590:	a7 95       	ror	r26
 592:	97 95       	ror	r25
 594:	87 95       	ror	r24
 596:	16 94       	lsr	r1
 598:	d1 f7       	brne	.-12     	; 0x58e <usart_set_baudrate+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
 59a:	b9 01       	movw	r22, r18
 59c:	a8 01       	movw	r20, r16
 59e:	03 2e       	mov	r0, r19
 5a0:	36 e1       	ldi	r19, 0x16	; 22
 5a2:	76 95       	lsr	r23
 5a4:	67 95       	ror	r22
 5a6:	57 95       	ror	r21
 5a8:	47 95       	ror	r20
 5aa:	3a 95       	dec	r19
 5ac:	d1 f7       	brne	.-12     	; 0x5a2 <usart_set_baudrate+0x48>
 5ae:	30 2d       	mov	r19, r0
 5b0:	15 c0       	rjmp	.+42     	; 0x5dc <usart_set_baudrate+0x82>

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		max_rate /= 2;
 5b2:	d9 01       	movw	r26, r18
 5b4:	c8 01       	movw	r24, r16
 5b6:	68 94       	set
 5b8:	13 f8       	bld	r1, 3
 5ba:	b6 95       	lsr	r27
 5bc:	a7 95       	ror	r26
 5be:	97 95       	ror	r25
 5c0:	87 95       	ror	r24
 5c2:	16 94       	lsr	r1
 5c4:	d1 f7       	brne	.-12     	; 0x5ba <usart_set_baudrate+0x60>
		min_rate /= 2;
 5c6:	b9 01       	movw	r22, r18
 5c8:	a8 01       	movw	r20, r16
 5ca:	03 2e       	mov	r0, r19
 5cc:	37 e1       	ldi	r19, 0x17	; 23
 5ce:	76 95       	lsr	r23
 5d0:	67 95       	ror	r22
 5d2:	57 95       	ror	r21
 5d4:	47 95       	ror	r20
 5d6:	3a 95       	dec	r19
 5d8:	d1 f7       	brne	.-12     	; 0x5ce <usart_set_baudrate+0x74>
 5da:	30 2d       	mov	r19, r0
	}

	if ((baud > max_rate) || (baud < min_rate)) {
 5dc:	88 15       	cp	r24, r8
 5de:	99 05       	cpc	r25, r9
 5e0:	aa 05       	cpc	r26, r10
 5e2:	bb 05       	cpc	r27, r11
 5e4:	08 f4       	brcc	.+2      	; 0x5e8 <usart_set_baudrate+0x8e>
 5e6:	a2 c0       	rjmp	.+324    	; 0x72c <usart_set_baudrate+0x1d2>
 5e8:	84 16       	cp	r8, r20
 5ea:	95 06       	cpc	r9, r21
 5ec:	a6 06       	cpc	r10, r22
 5ee:	b7 06       	cpc	r11, r23
 5f0:	08 f4       	brcc	.+2      	; 0x5f4 <usart_set_baudrate+0x9a>
 5f2:	9e c0       	rjmp	.+316    	; 0x730 <usart_set_baudrate+0x1d6>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
 5f4:	f7 01       	movw	r30, r14
 5f6:	84 81       	ldd	r24, Z+4	; 0x04
 5f8:	82 fd       	sbrc	r24, 2
 5fa:	04 c0       	rjmp	.+8      	; 0x604 <usart_set_baudrate+0xaa>
		baud *= 2;
 5fc:	88 0c       	add	r8, r8
 5fe:	99 1c       	adc	r9, r9
 600:	aa 1c       	adc	r10, r10
 602:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
 604:	c3 01       	movw	r24, r6
 606:	b2 01       	movw	r22, r4
 608:	a5 01       	movw	r20, r10
 60a:	94 01       	movw	r18, r8
 60c:	bc d1       	rcall	.+888    	; 0x986 <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
 60e:	2f 3f       	cpi	r18, 0xFF	; 255
 610:	31 05       	cpc	r19, r1
 612:	41 05       	cpc	r20, r1
 614:	51 05       	cpc	r21, r1
 616:	08 f4       	brcc	.+2      	; 0x61a <usart_set_baudrate+0xc0>
 618:	8d c0       	rjmp	.+282    	; 0x734 <usart_set_baudrate+0x1da>
 61a:	8f ef       	ldi	r24, 0xFF	; 255
 61c:	90 e0       	ldi	r25, 0x00	; 0
 61e:	a0 e0       	ldi	r26, 0x00	; 0
 620:	b0 e0       	ldi	r27, 0x00	; 0
 622:	c9 ef       	ldi	r28, 0xF9	; 249
 624:	05 c0       	rjmp	.+10     	; 0x630 <usart_set_baudrate+0xd6>
 626:	28 17       	cp	r18, r24
 628:	39 07       	cpc	r19, r25
 62a:	4a 07       	cpc	r20, r26
 62c:	5b 07       	cpc	r21, r27
 62e:	58 f0       	brcs	.+22     	; 0x646 <usart_set_baudrate+0xec>
			break;
		}

		limit <<= 1;
 630:	88 0f       	add	r24, r24
 632:	99 1f       	adc	r25, r25
 634:	aa 1f       	adc	r26, r26
 636:	bb 1f       	adc	r27, r27

		if (exp < -3) {
 638:	cd 3f       	cpi	r28, 0xFD	; 253
 63a:	0c f4       	brge	.+2      	; 0x63e <usart_set_baudrate+0xe4>
			limit |= 1;
 63c:	81 60       	ori	r24, 0x01	; 1
 63e:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
 640:	c7 30       	cpi	r28, 0x07	; 7
 642:	89 f7       	brne	.-30     	; 0x626 <usart_set_baudrate+0xcc>
 644:	4d c0       	rjmp	.+154    	; 0x6e0 <usart_set_baudrate+0x186>
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
 646:	cc 23       	and	r28, r28
 648:	0c f0       	brlt	.+2      	; 0x64c <usart_set_baudrate+0xf2>
 64a:	4a c0       	rjmp	.+148    	; 0x6e0 <usart_set_baudrate+0x186>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
 64c:	d5 01       	movw	r26, r10
 64e:	c4 01       	movw	r24, r8
 650:	88 0f       	add	r24, r24
 652:	99 1f       	adc	r25, r25
 654:	aa 1f       	adc	r26, r26
 656:	bb 1f       	adc	r27, r27
 658:	88 0f       	add	r24, r24
 65a:	99 1f       	adc	r25, r25
 65c:	aa 1f       	adc	r26, r26
 65e:	bb 1f       	adc	r27, r27
 660:	88 0f       	add	r24, r24
 662:	99 1f       	adc	r25, r25
 664:	aa 1f       	adc	r26, r26
 666:	bb 1f       	adc	r27, r27
 668:	48 1a       	sub	r4, r24
 66a:	59 0a       	sbc	r5, r25
 66c:	6a 0a       	sbc	r6, r26
 66e:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
 670:	ce 3f       	cpi	r28, 0xFE	; 254
 672:	ec f4       	brge	.+58     	; 0x6ae <usart_set_baudrate+0x154>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
 674:	8d ef       	ldi	r24, 0xFD	; 253
 676:	9f ef       	ldi	r25, 0xFF	; 255
 678:	8c 1b       	sub	r24, r28
 67a:	91 09       	sbc	r25, r1
 67c:	c7 fd       	sbrc	r28, 7
 67e:	93 95       	inc	r25
 680:	04 c0       	rjmp	.+8      	; 0x68a <usart_set_baudrate+0x130>
 682:	44 0c       	add	r4, r4
 684:	55 1c       	adc	r5, r5
 686:	66 1c       	adc	r6, r6
 688:	77 1c       	adc	r7, r7
 68a:	8a 95       	dec	r24
 68c:	d2 f7       	brpl	.-12     	; 0x682 <usart_set_baudrate+0x128>
 68e:	d5 01       	movw	r26, r10
 690:	c4 01       	movw	r24, r8
 692:	b6 95       	lsr	r27
 694:	a7 95       	ror	r26
 696:	97 95       	ror	r25
 698:	87 95       	ror	r24
 69a:	bc 01       	movw	r22, r24
 69c:	cd 01       	movw	r24, r26
 69e:	64 0d       	add	r22, r4
 6a0:	75 1d       	adc	r23, r5
 6a2:	86 1d       	adc	r24, r6
 6a4:	97 1d       	adc	r25, r7
 6a6:	a5 01       	movw	r20, r10
 6a8:	94 01       	movw	r18, r8
 6aa:	6d d1       	rcall	.+730    	; 0x986 <__udivmodsi4>
 6ac:	35 c0       	rjmp	.+106    	; 0x718 <usart_set_baudrate+0x1be>
		} else {
			baud <<= exp + 3;
 6ae:	83 e0       	ldi	r24, 0x03	; 3
 6b0:	8c 0f       	add	r24, r28
 6b2:	a5 01       	movw	r20, r10
 6b4:	94 01       	movw	r18, r8
 6b6:	04 c0       	rjmp	.+8      	; 0x6c0 <usart_set_baudrate+0x166>
 6b8:	22 0f       	add	r18, r18
 6ba:	33 1f       	adc	r19, r19
 6bc:	44 1f       	adc	r20, r20
 6be:	55 1f       	adc	r21, r21
 6c0:	8a 95       	dec	r24
 6c2:	d2 f7       	brpl	.-12     	; 0x6b8 <usart_set_baudrate+0x15e>
			div = (cpu_hz + baud / 2) / baud;
 6c4:	da 01       	movw	r26, r20
 6c6:	c9 01       	movw	r24, r18
 6c8:	b6 95       	lsr	r27
 6ca:	a7 95       	ror	r26
 6cc:	97 95       	ror	r25
 6ce:	87 95       	ror	r24
 6d0:	bc 01       	movw	r22, r24
 6d2:	cd 01       	movw	r24, r26
 6d4:	64 0d       	add	r22, r4
 6d6:	75 1d       	adc	r23, r5
 6d8:	86 1d       	adc	r24, r6
 6da:	97 1d       	adc	r25, r7
 6dc:	54 d1       	rcall	.+680    	; 0x986 <__udivmodsi4>
 6de:	1c c0       	rjmp	.+56     	; 0x718 <usart_set_baudrate+0x1be>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
 6e0:	83 e0       	ldi	r24, 0x03	; 3
 6e2:	8c 0f       	add	r24, r28
 6e4:	a5 01       	movw	r20, r10
 6e6:	94 01       	movw	r18, r8
 6e8:	04 c0       	rjmp	.+8      	; 0x6f2 <usart_set_baudrate+0x198>
 6ea:	22 0f       	add	r18, r18
 6ec:	33 1f       	adc	r19, r19
 6ee:	44 1f       	adc	r20, r20
 6f0:	55 1f       	adc	r21, r21
 6f2:	8a 95       	dec	r24
 6f4:	d2 f7       	brpl	.-12     	; 0x6ea <usart_set_baudrate+0x190>
		div = (cpu_hz + baud / 2) / baud - 1;
 6f6:	da 01       	movw	r26, r20
 6f8:	c9 01       	movw	r24, r18
 6fa:	b6 95       	lsr	r27
 6fc:	a7 95       	ror	r26
 6fe:	97 95       	ror	r25
 700:	87 95       	ror	r24
 702:	bc 01       	movw	r22, r24
 704:	cd 01       	movw	r24, r26
 706:	64 0d       	add	r22, r4
 708:	75 1d       	adc	r23, r5
 70a:	86 1d       	adc	r24, r6
 70c:	97 1d       	adc	r25, r7
 70e:	3b d1       	rcall	.+630    	; 0x986 <__udivmodsi4>
 710:	21 50       	subi	r18, 0x01	; 1
 712:	31 09       	sbc	r19, r1
 714:	41 09       	sbc	r20, r1
 716:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
 718:	83 2f       	mov	r24, r19
 71a:	8f 70       	andi	r24, 0x0F	; 15
 71c:	c2 95       	swap	r28
 71e:	c0 7f       	andi	r28, 0xF0	; 240
 720:	c8 2b       	or	r28, r24
 722:	f7 01       	movw	r30, r14
 724:	c7 83       	std	Z+7, r28	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
 726:	26 83       	std	Z+6, r18	; 0x06

	return true;
 728:	81 e0       	ldi	r24, 0x01	; 1
 72a:	18 c0       	rjmp	.+48     	; 0x75c <usart_set_baudrate+0x202>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
 72c:	80 e0       	ldi	r24, 0x00	; 0
 72e:	16 c0       	rjmp	.+44     	; 0x75c <usart_set_baudrate+0x202>
 730:	80 e0       	ldi	r24, 0x00	; 0
 732:	14 c0       	rjmp	.+40     	; 0x75c <usart_set_baudrate+0x202>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
 734:	d5 01       	movw	r26, r10
 736:	c4 01       	movw	r24, r8
 738:	88 0f       	add	r24, r24
 73a:	99 1f       	adc	r25, r25
 73c:	aa 1f       	adc	r26, r26
 73e:	bb 1f       	adc	r27, r27
 740:	88 0f       	add	r24, r24
 742:	99 1f       	adc	r25, r25
 744:	aa 1f       	adc	r26, r26
 746:	bb 1f       	adc	r27, r27
 748:	88 0f       	add	r24, r24
 74a:	99 1f       	adc	r25, r25
 74c:	aa 1f       	adc	r26, r26
 74e:	bb 1f       	adc	r27, r27
 750:	48 1a       	sub	r4, r24
 752:	59 0a       	sbc	r5, r25
 754:	6a 0a       	sbc	r6, r26
 756:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
 758:	c9 ef       	ldi	r28, 0xF9	; 249
 75a:	8c cf       	rjmp	.-232    	; 0x674 <usart_set_baudrate+0x11a>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
 75c:	cf 91       	pop	r28
 75e:	1f 91       	pop	r17
 760:	0f 91       	pop	r16
 762:	ff 90       	pop	r15
 764:	ef 90       	pop	r14
 766:	bf 90       	pop	r11
 768:	af 90       	pop	r10
 76a:	9f 90       	pop	r9
 76c:	8f 90       	pop	r8
 76e:	7f 90       	pop	r7
 770:	6f 90       	pop	r6
 772:	5f 90       	pop	r5
 774:	4f 90       	pop	r4
 776:	08 95       	ret

00000778 <usart_init_rs232>:
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */

bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
 778:	0f 93       	push	r16
 77a:	1f 93       	push	r17
 77c:	cf 93       	push	r28
 77e:	df 93       	push	r29
 780:	ec 01       	movw	r28, r24
 782:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
 784:	00 97       	sbiw	r24, 0x00	; 0
 786:	09 f4       	brne	.+2      	; 0x78a <usart_init_rs232+0x12>
 788:	be c0       	rjmp	.+380    	; 0x906 <usart_init_rs232+0x18e>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
 78a:	80 3c       	cpi	r24, 0xC0	; 192
 78c:	91 05       	cpc	r25, r1
 78e:	21 f4       	brne	.+8      	; 0x798 <usart_init_rs232+0x20>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
 790:	60 e1       	ldi	r22, 0x10	; 16
 792:	80 e0       	ldi	r24, 0x00	; 0
 794:	37 dd       	rcall	.-1426   	; 0x204 <sysclk_enable_module>
 796:	b7 c0       	rjmp	.+366    	; 0x906 <usart_init_rs232+0x18e>
	else if (module == &EBI) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
 798:	c1 15       	cp	r28, r1
 79a:	84 e0       	ldi	r24, 0x04	; 4
 79c:	d8 07       	cpc	r29, r24
 79e:	21 f4       	brne	.+8      	; 0x7a8 <usart_init_rs232+0x30>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
 7a0:	64 e0       	ldi	r22, 0x04	; 4
 7a2:	80 e0       	ldi	r24, 0x00	; 0
 7a4:	2f dd       	rcall	.-1442   	; 0x204 <sysclk_enable_module>
 7a6:	af c0       	rjmp	.+350    	; 0x906 <usart_init_rs232+0x18e>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
 7a8:	c0 38       	cpi	r28, 0x80	; 128
 7aa:	e1 e0       	ldi	r30, 0x01	; 1
 7ac:	de 07       	cpc	r29, r30
 7ae:	21 f4       	brne	.+8      	; 0x7b8 <usart_init_rs232+0x40>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
 7b0:	62 e0       	ldi	r22, 0x02	; 2
 7b2:	80 e0       	ldi	r24, 0x00	; 0
 7b4:	27 dd       	rcall	.-1458   	; 0x204 <sysclk_enable_module>
 7b6:	a7 c0       	rjmp	.+334    	; 0x906 <usart_init_rs232+0x18e>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
 7b8:	c1 15       	cp	r28, r1
 7ba:	f1 e0       	ldi	r31, 0x01	; 1
 7bc:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
 7be:	21 f4       	brne	.+8      	; 0x7c8 <usart_init_rs232+0x50>
 7c0:	61 e0       	ldi	r22, 0x01	; 1
 7c2:	80 e0       	ldi	r24, 0x00	; 0
 7c4:	1f dd       	rcall	.-1474   	; 0x204 <sysclk_enable_module>
 7c6:	9f c0       	rjmp	.+318    	; 0x906 <usart_init_rs232+0x18e>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
 7c8:	c0 38       	cpi	r28, 0x80	; 128
 7ca:	83 e0       	ldi	r24, 0x03	; 3
 7cc:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
 7ce:	21 f4       	brne	.+8      	; 0x7d8 <usart_init_rs232+0x60>
 7d0:	61 e0       	ldi	r22, 0x01	; 1
 7d2:	81 e0       	ldi	r24, 0x01	; 1
 7d4:	17 dd       	rcall	.-1490   	; 0x204 <sysclk_enable_module>
 7d6:	97 c0       	rjmp	.+302    	; 0x906 <usart_init_rs232+0x18e>
	else if (module == &ACB) {
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
 7d8:	c1 15       	cp	r28, r1
 7da:	e2 e0       	ldi	r30, 0x02	; 2
 7dc:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
 7de:	21 f4       	brne	.+8      	; 0x7e8 <usart_init_rs232+0x70>
 7e0:	62 e0       	ldi	r22, 0x02	; 2
 7e2:	81 e0       	ldi	r24, 0x01	; 1
 7e4:	0f dd       	rcall	.-1506   	; 0x204 <sysclk_enable_module>
 7e6:	8f c0       	rjmp	.+286    	; 0x906 <usart_init_rs232+0x18e>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
 7e8:	c0 32       	cpi	r28, 0x20	; 32
 7ea:	f3 e0       	ldi	r31, 0x03	; 3
 7ec:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
 7ee:	21 f4       	brne	.+8      	; 0x7f8 <usart_init_rs232+0x80>
 7f0:	64 e0       	ldi	r22, 0x04	; 4
 7f2:	82 e0       	ldi	r24, 0x02	; 2
 7f4:	07 dd       	rcall	.-1522   	; 0x204 <sysclk_enable_module>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
 7f6:	87 c0       	rjmp	.+270    	; 0x906 <usart_init_rs232+0x18e>
 7f8:	c1 15       	cp	r28, r1
 7fa:	88 e0       	ldi	r24, 0x08	; 8
 7fc:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
 7fe:	21 f4       	brne	.+8      	; 0x808 <usart_init_rs232+0x90>
 800:	61 e0       	ldi	r22, 0x01	; 1
 802:	83 e0       	ldi	r24, 0x03	; 3
 804:	ff dc       	rcall	.-1538   	; 0x204 <sysclk_enable_module>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
 806:	7f c0       	rjmp	.+254    	; 0x906 <usart_init_rs232+0x18e>
 808:	c1 15       	cp	r28, r1
 80a:	e9 e0       	ldi	r30, 0x09	; 9
 80c:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
 80e:	21 f4       	brne	.+8      	; 0x818 <usart_init_rs232+0xa0>
 810:	61 e0       	ldi	r22, 0x01	; 1
 812:	84 e0       	ldi	r24, 0x04	; 4
 814:	f7 dc       	rcall	.-1554   	; 0x204 <sysclk_enable_module>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
 816:	77 c0       	rjmp	.+238    	; 0x906 <usart_init_rs232+0x18e>
 818:	c1 15       	cp	r28, r1
 81a:	fa e0       	ldi	r31, 0x0A	; 10
 81c:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
 81e:	21 f4       	brne	.+8      	; 0x828 <usart_init_rs232+0xb0>
 820:	61 e0       	ldi	r22, 0x01	; 1
 822:	85 e0       	ldi	r24, 0x05	; 5
 824:	ef dc       	rcall	.-1570   	; 0x204 <sysclk_enable_module>
	else if (module == &TCF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
 826:	6f c0       	rjmp	.+222    	; 0x906 <usart_init_rs232+0x18e>
 828:	c0 34       	cpi	r28, 0x40	; 64
 82a:	88 e0       	ldi	r24, 0x08	; 8
 82c:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
 82e:	21 f4       	brne	.+8      	; 0x838 <usart_init_rs232+0xc0>
 830:	62 e0       	ldi	r22, 0x02	; 2
 832:	83 e0       	ldi	r24, 0x03	; 3
 834:	e7 dc       	rcall	.-1586   	; 0x204 <sysclk_enable_module>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
 836:	67 c0       	rjmp	.+206    	; 0x906 <usart_init_rs232+0x18e>
 838:	c0 34       	cpi	r28, 0x40	; 64
 83a:	e9 e0       	ldi	r30, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
 83c:	de 07       	cpc	r29, r30
 83e:	21 f4       	brne	.+8      	; 0x848 <usart_init_rs232+0xd0>
 840:	62 e0       	ldi	r22, 0x02	; 2
 842:	84 e0       	ldi	r24, 0x04	; 4
 844:	df dc       	rcall	.-1602   	; 0x204 <sysclk_enable_module>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
 846:	5f c0       	rjmp	.+190    	; 0x906 <usart_init_rs232+0x18e>
 848:	c0 39       	cpi	r28, 0x90	; 144
 84a:	f8 e0       	ldi	r31, 0x08	; 8
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
 84c:	df 07       	cpc	r29, r31
 84e:	21 f4       	brne	.+8      	; 0x858 <usart_init_rs232+0xe0>
 850:	64 e0       	ldi	r22, 0x04	; 4
 852:	83 e0       	ldi	r24, 0x03	; 3
 854:	d7 dc       	rcall	.-1618   	; 0x204 <sysclk_enable_module>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
 856:	57 c0       	rjmp	.+174    	; 0x906 <usart_init_rs232+0x18e>
 858:	c0 39       	cpi	r28, 0x90	; 144
 85a:	89 e0       	ldi	r24, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
 85c:	d8 07       	cpc	r29, r24
 85e:	21 f4       	brne	.+8      	; 0x868 <usart_init_rs232+0xf0>
 860:	64 e0       	ldi	r22, 0x04	; 4
 862:	84 e0       	ldi	r24, 0x04	; 4
 864:	cf dc       	rcall	.-1634   	; 0x204 <sysclk_enable_module>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
 866:	4f c0       	rjmp	.+158    	; 0x906 <usart_init_rs232+0x18e>
 868:	c0 39       	cpi	r28, 0x90	; 144
 86a:	ea e0       	ldi	r30, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
 86c:	de 07       	cpc	r29, r30
 86e:	21 f4       	brne	.+8      	; 0x878 <usart_init_rs232+0x100>
 870:	64 e0       	ldi	r22, 0x04	; 4
 872:	85 e0       	ldi	r24, 0x05	; 5
	else if (module == &HIRESF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
 874:	c7 dc       	rcall	.-1650   	; 0x204 <sysclk_enable_module>
 876:	47 c0       	rjmp	.+142    	; 0x906 <usart_init_rs232+0x18e>
 878:	c0 3c       	cpi	r28, 0xC0	; 192
 87a:	f8 e0       	ldi	r31, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
 87c:	df 07       	cpc	r29, r31
 87e:	21 f4       	brne	.+8      	; 0x888 <usart_init_rs232+0x110>
 880:	68 e0       	ldi	r22, 0x08	; 8
 882:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
 884:	bf dc       	rcall	.-1666   	; 0x204 <sysclk_enable_module>
 886:	3f c0       	rjmp	.+126    	; 0x906 <usart_init_rs232+0x18e>
 888:	c0 3c       	cpi	r28, 0xC0	; 192
 88a:	89 e0       	ldi	r24, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
 88c:	d8 07       	cpc	r29, r24
 88e:	21 f4       	brne	.+8      	; 0x898 <usart_init_rs232+0x120>
 890:	68 e0       	ldi	r22, 0x08	; 8
 892:	84 e0       	ldi	r24, 0x04	; 4
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
 894:	b7 dc       	rcall	.-1682   	; 0x204 <sysclk_enable_module>
 896:	37 c0       	rjmp	.+110    	; 0x906 <usart_init_rs232+0x18e>
 898:	c0 3a       	cpi	r28, 0xA0	; 160
 89a:	e8 e0       	ldi	r30, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
 89c:	de 07       	cpc	r29, r30
 89e:	21 f4       	brne	.+8      	; 0x8a8 <usart_init_rs232+0x130>
 8a0:	60 e1       	ldi	r22, 0x10	; 16
 8a2:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
 8a4:	af dc       	rcall	.-1698   	; 0x204 <sysclk_enable_module>
 8a6:	2f c0       	rjmp	.+94     	; 0x906 <usart_init_rs232+0x18e>
 8a8:	c0 3a       	cpi	r28, 0xA0	; 160
 8aa:	f9 e0       	ldi	r31, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
 8ac:	df 07       	cpc	r29, r31
 8ae:	21 f4       	brne	.+8      	; 0x8b8 <usart_init_rs232+0x140>
 8b0:	60 e1       	ldi	r22, 0x10	; 16
 8b2:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
 8b4:	a7 dc       	rcall	.-1714   	; 0x204 <sysclk_enable_module>
 8b6:	27 c0       	rjmp	.+78     	; 0x906 <usart_init_rs232+0x18e>
 8b8:	c0 3a       	cpi	r28, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
 8ba:	8a e0       	ldi	r24, 0x0A	; 10
 8bc:	d8 07       	cpc	r29, r24
 8be:	21 f4       	brne	.+8      	; 0x8c8 <usart_init_rs232+0x150>
 8c0:	60 e1       	ldi	r22, 0x10	; 16
 8c2:	85 e0       	ldi	r24, 0x05	; 5
	else if (module == &USARTF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
 8c4:	9f dc       	rcall	.-1730   	; 0x204 <sysclk_enable_module>
 8c6:	1f c0       	rjmp	.+62     	; 0x906 <usart_init_rs232+0x18e>
 8c8:	c0 3b       	cpi	r28, 0xB0	; 176
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
 8ca:	e8 e0       	ldi	r30, 0x08	; 8
 8cc:	de 07       	cpc	r29, r30
 8ce:	21 f4       	brne	.+8      	; 0x8d8 <usart_init_rs232+0x160>
 8d0:	60 e2       	ldi	r22, 0x20	; 32
 8d2:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
 8d4:	97 dc       	rcall	.-1746   	; 0x204 <sysclk_enable_module>
 8d6:	17 c0       	rjmp	.+46     	; 0x906 <usart_init_rs232+0x18e>
 8d8:	c0 3b       	cpi	r28, 0xB0	; 176
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
 8da:	f9 e0       	ldi	r31, 0x09	; 9
 8dc:	df 07       	cpc	r29, r31
 8de:	21 f4       	brne	.+8      	; 0x8e8 <usart_init_rs232+0x170>
 8e0:	60 e2       	ldi	r22, 0x20	; 32
 8e2:	84 e0       	ldi	r24, 0x04	; 4
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
 8e4:	8f dc       	rcall	.-1762   	; 0x204 <sysclk_enable_module>
 8e6:	0f c0       	rjmp	.+30     	; 0x906 <usart_init_rs232+0x18e>
 8e8:	c0 38       	cpi	r28, 0x80	; 128
 8ea:	84 e0       	ldi	r24, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
 8ec:	d8 07       	cpc	r29, r24
 8ee:	21 f4       	brne	.+8      	; 0x8f8 <usart_init_rs232+0x180>
 8f0:	60 e4       	ldi	r22, 0x40	; 64
 8f2:	83 e0       	ldi	r24, 0x03	; 3
 8f4:	87 dc       	rcall	.-1778   	; 0x204 <sysclk_enable_module>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
 8f6:	07 c0       	rjmp	.+14     	; 0x906 <usart_init_rs232+0x18e>
 8f8:	c0 3a       	cpi	r28, 0xA0	; 160
 8fa:	e4 e0       	ldi	r30, 0x04	; 4
 8fc:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
 8fe:	19 f4       	brne	.+6      	; 0x906 <usart_init_rs232+0x18e>
 900:	60 e4       	ldi	r22, 0x40	; 64
 902:	85 e0       	ldi	r24, 0x05	; 5
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
 904:	7f dc       	rcall	.-1794   	; 0x204 <sysclk_enable_module>
 906:	8d 81       	ldd	r24, Y+5	; 0x05
 908:	8f 73       	andi	r24, 0x3F	; 63
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
 90a:	8d 83       	std	Y+5, r24	; 0x05
 90c:	f8 01       	movw	r30, r16
 90e:	95 81       	ldd	r25, Z+5	; 0x05
 910:	84 81       	ldd	r24, Z+4	; 0x04
 912:	89 2b       	or	r24, r25
 914:	96 81       	ldd	r25, Z+6	; 0x06
 916:	91 11       	cpse	r25, r1
 918:	98 e0       	ldi	r25, 0x08	; 8
 91a:	89 2b       	or	r24, r25
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
 91c:	8d 83       	std	Y+5, r24	; 0x05
 91e:	f8 01       	movw	r30, r16
 920:	40 81       	ld	r20, Z
 922:	51 81       	ldd	r21, Z+1	; 0x01
 924:	62 81       	ldd	r22, Z+2	; 0x02
 926:	73 81       	ldd	r23, Z+3	; 0x03
 928:	00 e8       	ldi	r16, 0x80	; 128
 92a:	14 e8       	ldi	r17, 0x84	; 132
 92c:	2e e1       	ldi	r18, 0x1E	; 30
 92e:	30 e0       	ldi	r19, 0x00	; 0
 930:	ce 01       	movw	r24, r28
 932:	13 de       	rcall	.-986    	; 0x55a <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
 934:	9c 81       	ldd	r25, Y+4	; 0x04
 936:	98 60       	ori	r25, 0x08	; 8
 938:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
 93a:	9c 81       	ldd	r25, Y+4	; 0x04
 93c:	90 61       	ori	r25, 0x10	; 16
 93e:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
 940:	df 91       	pop	r29
 942:	cf 91       	pop	r28
 944:	1f 91       	pop	r17
 946:	0f 91       	pop	r16
 948:	08 95       	ret

0000094a <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
 94a:	04 c0       	rjmp	.+8      	; 0x954 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
 94c:	61 50       	subi	r22, 0x01	; 1
 94e:	71 09       	sbc	r23, r1
 950:	81 09       	sbc	r24, r1
 952:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
 954:	61 15       	cp	r22, r1
 956:	71 05       	cpc	r23, r1
 958:	81 05       	cpc	r24, r1
 95a:	91 05       	cpc	r25, r1
 95c:	b9 f7       	brne	.-18     	; 0x94c <__portable_avr_delay_cycles+0x2>
 95e:	08 95       	ret

00000960 <main>:
#define LED0 IOPORT_CREATE_PIN(PORTB, 14)

int main(void)
{
	/* Insert system clock initialization code here (sysclk_init()). */
	sysclk_init();
 960:	41 dc       	rcall	.-1918   	; 0x1e4 <sysclk_init>
	board_init();
 962:	3f dc       	rcall	.-1922   	; 0x1e2 <board_init>
	USARTS_inits();
 964:	25 dc       	rcall	.-1974   	; 0x1b0 <USARTS_inits>
 966:	e0 e4       	ldi	r30, 0x40	; 64
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
 968:	f6 e0       	ldi	r31, 0x06	; 6
 96a:	80 e4       	ldi	r24, 0x40	; 64
 96c:	81 83       	std	Z+1, r24	; 0x01
 96e:	85 83       	std	Z+5, r24	; 0x05
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
 970:	00 e4       	ldi	r16, 0x40	; 64

__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	base->OUTTGL = arch_ioport_pin_to_mask(pin);
 972:	16 e0       	ldi	r17, 0x06	; 6
 974:	c0 e4       	ldi	r28, 0x40	; 64
 976:	f8 01       	movw	r30, r16
 978:	c7 83       	std	Z+7, r28	; 0x07
 97a:	66 e1       	ldi	r22, 0x16	; 22
    
	/* Insert application code here, after the board has been initialized. */ 
    while (1) 
    {
		ioport_toggle_pin_level(LED0);
		delay_ms(1000);
 97c:	76 e1       	ldi	r23, 0x16	; 22
 97e:	85 e0       	ldi	r24, 0x05	; 5
 980:	90 e0       	ldi	r25, 0x00	; 0
 982:	e3 df       	rcall	.-58     	; 0x94a <__portable_avr_delay_cycles>
 984:	f8 cf       	rjmp	.-16     	; 0x976 <main+0x16>

00000986 <__udivmodsi4>:
 986:	a1 e2       	ldi	r26, 0x21	; 33
 988:	1a 2e       	mov	r1, r26
 98a:	aa 1b       	sub	r26, r26
 98c:	bb 1b       	sub	r27, r27
 98e:	fd 01       	movw	r30, r26
 990:	0d c0       	rjmp	.+26     	; 0x9ac <__udivmodsi4_ep>

00000992 <__udivmodsi4_loop>:
 992:	aa 1f       	adc	r26, r26
 994:	bb 1f       	adc	r27, r27
 996:	ee 1f       	adc	r30, r30
 998:	ff 1f       	adc	r31, r31
 99a:	a2 17       	cp	r26, r18
 99c:	b3 07       	cpc	r27, r19
 99e:	e4 07       	cpc	r30, r20
 9a0:	f5 07       	cpc	r31, r21
 9a2:	20 f0       	brcs	.+8      	; 0x9ac <__udivmodsi4_ep>
 9a4:	a2 1b       	sub	r26, r18
 9a6:	b3 0b       	sbc	r27, r19
 9a8:	e4 0b       	sbc	r30, r20
 9aa:	f5 0b       	sbc	r31, r21

000009ac <__udivmodsi4_ep>:
 9ac:	66 1f       	adc	r22, r22
 9ae:	77 1f       	adc	r23, r23
 9b0:	88 1f       	adc	r24, r24
 9b2:	99 1f       	adc	r25, r25
 9b4:	1a 94       	dec	r1
 9b6:	69 f7       	brne	.-38     	; 0x992 <__udivmodsi4_loop>
 9b8:	60 95       	com	r22
 9ba:	70 95       	com	r23
 9bc:	80 95       	com	r24
 9be:	90 95       	com	r25
 9c0:	9b 01       	movw	r18, r22
 9c2:	ac 01       	movw	r20, r24
 9c4:	bd 01       	movw	r22, r26
 9c6:	cf 01       	movw	r24, r30
 9c8:	08 95       	ret

000009ca <_exit>:
 9ca:	f8 94       	cli

000009cc <__stop_program>:
 9cc:	ff cf       	rjmp	.-2      	; 0x9cc <__stop_program>
