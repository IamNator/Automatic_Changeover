
code-mcu.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000053a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  000005ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  00802000  00802000  000005ae  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005ae  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000158  00000000  00000000  00000620  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004fe1  00000000  00000000  00000778  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002e42  00000000  00000000  00005759  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003063  00000000  00000000  0000859b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000050c  00000000  00000000  0000b600  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000273d3  00000000  00000000  0000bb0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000131f  00000000  00000000  00032edf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  000341fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00008734  00000000  00000000  00034326  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	bb c0       	rjmp	.+374    	; 0x178 <__ctors_end>
   2:	00 00       	nop
   4:	d4 c0       	rjmp	.+424    	; 0x1ae <__bad_interrupt>
   6:	00 00       	nop
   8:	d2 c0       	rjmp	.+420    	; 0x1ae <__bad_interrupt>
   a:	00 00       	nop
   c:	d0 c0       	rjmp	.+416    	; 0x1ae <__bad_interrupt>
   e:	00 00       	nop
  10:	ce c0       	rjmp	.+412    	; 0x1ae <__bad_interrupt>
  12:	00 00       	nop
  14:	cc c0       	rjmp	.+408    	; 0x1ae <__bad_interrupt>
  16:	00 00       	nop
  18:	ca c0       	rjmp	.+404    	; 0x1ae <__bad_interrupt>
  1a:	00 00       	nop
  1c:	c8 c0       	rjmp	.+400    	; 0x1ae <__bad_interrupt>
  1e:	00 00       	nop
  20:	c6 c0       	rjmp	.+396    	; 0x1ae <__bad_interrupt>
  22:	00 00       	nop
  24:	c4 c0       	rjmp	.+392    	; 0x1ae <__bad_interrupt>
  26:	00 00       	nop
  28:	c2 c0       	rjmp	.+388    	; 0x1ae <__bad_interrupt>
  2a:	00 00       	nop
  2c:	c0 c0       	rjmp	.+384    	; 0x1ae <__bad_interrupt>
  2e:	00 00       	nop
  30:	be c0       	rjmp	.+380    	; 0x1ae <__bad_interrupt>
  32:	00 00       	nop
  34:	1d c2       	rjmp	.+1082   	; 0x470 <__vector_13>
  36:	00 00       	nop
  38:	ba c0       	rjmp	.+372    	; 0x1ae <__bad_interrupt>
  3a:	00 00       	nop
  3c:	b8 c0       	rjmp	.+368    	; 0x1ae <__bad_interrupt>
  3e:	00 00       	nop
  40:	b6 c0       	rjmp	.+364    	; 0x1ae <__bad_interrupt>
  42:	00 00       	nop
  44:	b4 c0       	rjmp	.+360    	; 0x1ae <__bad_interrupt>
  46:	00 00       	nop
  48:	b2 c0       	rjmp	.+356    	; 0x1ae <__bad_interrupt>
  4a:	00 00       	nop
  4c:	b0 c0       	rjmp	.+352    	; 0x1ae <__bad_interrupt>
  4e:	00 00       	nop
  50:	ae c0       	rjmp	.+348    	; 0x1ae <__bad_interrupt>
  52:	00 00       	nop
  54:	ac c0       	rjmp	.+344    	; 0x1ae <__bad_interrupt>
  56:	00 00       	nop
  58:	aa c0       	rjmp	.+340    	; 0x1ae <__bad_interrupt>
  5a:	00 00       	nop
  5c:	a8 c0       	rjmp	.+336    	; 0x1ae <__bad_interrupt>
  5e:	00 00       	nop
  60:	a6 c0       	rjmp	.+332    	; 0x1ae <__bad_interrupt>
  62:	00 00       	nop
  64:	a4 c0       	rjmp	.+328    	; 0x1ae <__bad_interrupt>
  66:	00 00       	nop
  68:	a2 c0       	rjmp	.+324    	; 0x1ae <__bad_interrupt>
  6a:	00 00       	nop
  6c:	a0 c0       	rjmp	.+320    	; 0x1ae <__bad_interrupt>
  6e:	00 00       	nop
  70:	9e c0       	rjmp	.+316    	; 0x1ae <__bad_interrupt>
  72:	00 00       	nop
  74:	9c c0       	rjmp	.+312    	; 0x1ae <__bad_interrupt>
  76:	00 00       	nop
  78:	9a c0       	rjmp	.+308    	; 0x1ae <__bad_interrupt>
  7a:	00 00       	nop
  7c:	98 c0       	rjmp	.+304    	; 0x1ae <__bad_interrupt>
  7e:	00 00       	nop
  80:	96 c0       	rjmp	.+300    	; 0x1ae <__bad_interrupt>
  82:	00 00       	nop
  84:	94 c0       	rjmp	.+296    	; 0x1ae <__bad_interrupt>
  86:	00 00       	nop
  88:	92 c0       	rjmp	.+292    	; 0x1ae <__bad_interrupt>
  8a:	00 00       	nop
  8c:	90 c0       	rjmp	.+288    	; 0x1ae <__bad_interrupt>
  8e:	00 00       	nop
  90:	8e c0       	rjmp	.+284    	; 0x1ae <__bad_interrupt>
  92:	00 00       	nop
  94:	8c c0       	rjmp	.+280    	; 0x1ae <__bad_interrupt>
  96:	00 00       	nop
  98:	8a c0       	rjmp	.+276    	; 0x1ae <__bad_interrupt>
  9a:	00 00       	nop
  9c:	88 c0       	rjmp	.+272    	; 0x1ae <__bad_interrupt>
  9e:	00 00       	nop
  a0:	86 c0       	rjmp	.+268    	; 0x1ae <__bad_interrupt>
  a2:	00 00       	nop
  a4:	84 c0       	rjmp	.+264    	; 0x1ae <__bad_interrupt>
  a6:	00 00       	nop
  a8:	82 c0       	rjmp	.+260    	; 0x1ae <__bad_interrupt>
  aa:	00 00       	nop
  ac:	80 c0       	rjmp	.+256    	; 0x1ae <__bad_interrupt>
  ae:	00 00       	nop
  b0:	7e c0       	rjmp	.+252    	; 0x1ae <__bad_interrupt>
  b2:	00 00       	nop
  b4:	7c c0       	rjmp	.+248    	; 0x1ae <__bad_interrupt>
  b6:	00 00       	nop
  b8:	fe c1       	rjmp	.+1020   	; 0x4b6 <__vector_46>
  ba:	00 00       	nop
  bc:	78 c0       	rjmp	.+240    	; 0x1ae <__bad_interrupt>
  be:	00 00       	nop
  c0:	76 c0       	rjmp	.+236    	; 0x1ae <__bad_interrupt>
  c2:	00 00       	nop
  c4:	74 c0       	rjmp	.+232    	; 0x1ae <__bad_interrupt>
  c6:	00 00       	nop
  c8:	72 c0       	rjmp	.+228    	; 0x1ae <__bad_interrupt>
  ca:	00 00       	nop
  cc:	70 c0       	rjmp	.+224    	; 0x1ae <__bad_interrupt>
  ce:	00 00       	nop
  d0:	6e c0       	rjmp	.+220    	; 0x1ae <__bad_interrupt>
  d2:	00 00       	nop
  d4:	6c c0       	rjmp	.+216    	; 0x1ae <__bad_interrupt>
  d6:	00 00       	nop
  d8:	6a c0       	rjmp	.+212    	; 0x1ae <__bad_interrupt>
  da:	00 00       	nop
  dc:	68 c0       	rjmp	.+208    	; 0x1ae <__bad_interrupt>
  de:	00 00       	nop
  e0:	66 c0       	rjmp	.+204    	; 0x1ae <__bad_interrupt>
  e2:	00 00       	nop
  e4:	64 c0       	rjmp	.+200    	; 0x1ae <__bad_interrupt>
  e6:	00 00       	nop
  e8:	62 c0       	rjmp	.+196    	; 0x1ae <__bad_interrupt>
  ea:	00 00       	nop
  ec:	60 c0       	rjmp	.+192    	; 0x1ae <__bad_interrupt>
  ee:	00 00       	nop
  f0:	5e c0       	rjmp	.+188    	; 0x1ae <__bad_interrupt>
  f2:	00 00       	nop
  f4:	5c c0       	rjmp	.+184    	; 0x1ae <__bad_interrupt>
  f6:	00 00       	nop
  f8:	5a c0       	rjmp	.+180    	; 0x1ae <__bad_interrupt>
  fa:	00 00       	nop
  fc:	58 c0       	rjmp	.+176    	; 0x1ae <__bad_interrupt>
  fe:	00 00       	nop
 100:	56 c0       	rjmp	.+172    	; 0x1ae <__bad_interrupt>
 102:	00 00       	nop
 104:	54 c0       	rjmp	.+168    	; 0x1ae <__bad_interrupt>
 106:	00 00       	nop
 108:	52 c0       	rjmp	.+164    	; 0x1ae <__bad_interrupt>
 10a:	00 00       	nop
 10c:	50 c0       	rjmp	.+160    	; 0x1ae <__bad_interrupt>
 10e:	00 00       	nop
 110:	4e c0       	rjmp	.+156    	; 0x1ae <__bad_interrupt>
 112:	00 00       	nop
 114:	4c c0       	rjmp	.+152    	; 0x1ae <__bad_interrupt>
 116:	00 00       	nop
 118:	4a c0       	rjmp	.+148    	; 0x1ae <__bad_interrupt>
 11a:	00 00       	nop
 11c:	5a c0       	rjmp	.+180    	; 0x1d2 <__vector_71>
 11e:	00 00       	nop
 120:	86 c0       	rjmp	.+268    	; 0x22e <__vector_72>
 122:	00 00       	nop
 124:	b2 c0       	rjmp	.+356    	; 0x28a <__vector_73>
 126:	00 00       	nop
 128:	de c0       	rjmp	.+444    	; 0x2e6 <__vector_74>
 12a:	00 00       	nop
 12c:	40 c0       	rjmp	.+128    	; 0x1ae <__bad_interrupt>
 12e:	00 00       	nop
 130:	3e c0       	rjmp	.+124    	; 0x1ae <__bad_interrupt>
 132:	00 00       	nop
 134:	3c c0       	rjmp	.+120    	; 0x1ae <__bad_interrupt>
 136:	00 00       	nop
 138:	3a c0       	rjmp	.+116    	; 0x1ae <__bad_interrupt>
 13a:	00 00       	nop
 13c:	38 c0       	rjmp	.+112    	; 0x1ae <__bad_interrupt>
 13e:	00 00       	nop
 140:	36 c0       	rjmp	.+108    	; 0x1ae <__bad_interrupt>
 142:	00 00       	nop
 144:	34 c0       	rjmp	.+104    	; 0x1ae <__bad_interrupt>
 146:	00 00       	nop
 148:	32 c0       	rjmp	.+100    	; 0x1ae <__bad_interrupt>
 14a:	00 00       	nop
 14c:	30 c0       	rjmp	.+96     	; 0x1ae <__bad_interrupt>
 14e:	00 00       	nop
 150:	2e c0       	rjmp	.+92     	; 0x1ae <__bad_interrupt>
 152:	00 00       	nop
 154:	2c c0       	rjmp	.+88     	; 0x1ae <__bad_interrupt>
 156:	00 00       	nop
 158:	2a c0       	rjmp	.+84     	; 0x1ae <__bad_interrupt>
 15a:	00 00       	nop
 15c:	28 c0       	rjmp	.+80     	; 0x1ae <__bad_interrupt>
 15e:	00 00       	nop
 160:	26 c0       	rjmp	.+76     	; 0x1ae <__bad_interrupt>
 162:	00 00       	nop
 164:	24 c0       	rjmp	.+72     	; 0x1ae <__bad_interrupt>
 166:	00 00       	nop
 168:	22 c0       	rjmp	.+68     	; 0x1ae <__bad_interrupt>
 16a:	00 00       	nop
 16c:	20 c0       	rjmp	.+64     	; 0x1ae <__bad_interrupt>
 16e:	00 00       	nop
 170:	1e c0       	rjmp	.+60     	; 0x1ae <__bad_interrupt>
 172:	00 00       	nop
 174:	1c c0       	rjmp	.+56     	; 0x1ae <__bad_interrupt>
	...

00000178 <__ctors_end>:
 178:	11 24       	eor	r1, r1
 17a:	1f be       	out	0x3f, r1	; 63
 17c:	cf ef       	ldi	r28, 0xFF	; 255
 17e:	cd bf       	out	0x3d, r28	; 61
 180:	d7 e2       	ldi	r29, 0x27	; 39
 182:	de bf       	out	0x3e, r29	; 62

00000184 <__do_copy_data>:
 184:	10 e2       	ldi	r17, 0x20	; 32
 186:	a0 e0       	ldi	r26, 0x00	; 0
 188:	b0 e2       	ldi	r27, 0x20	; 32
 18a:	ea e3       	ldi	r30, 0x3A	; 58
 18c:	f5 e0       	ldi	r31, 0x05	; 5
 18e:	02 c0       	rjmp	.+4      	; 0x194 <__do_copy_data+0x10>
 190:	05 90       	lpm	r0, Z+
 192:	0d 92       	st	X+, r0
 194:	a0 30       	cpi	r26, 0x00	; 0
 196:	b1 07       	cpc	r27, r17
 198:	d9 f7       	brne	.-10     	; 0x190 <__do_copy_data+0xc>

0000019a <__do_clear_bss>:
 19a:	20 e2       	ldi	r18, 0x20	; 32
 19c:	a0 e0       	ldi	r26, 0x00	; 0
 19e:	b0 e2       	ldi	r27, 0x20	; 32
 1a0:	01 c0       	rjmp	.+2      	; 0x1a4 <.do_clear_bss_start>

000001a2 <.do_clear_bss_loop>:
 1a2:	1d 92       	st	X+, r1

000001a4 <.do_clear_bss_start>:
 1a4:	ad 30       	cpi	r26, 0x0D	; 13
 1a6:	b2 07       	cpc	r27, r18
 1a8:	e1 f7       	brne	.-8      	; 0x1a2 <.do_clear_bss_loop>
 1aa:	b3 d1       	rcall	.+870    	; 0x512 <main>
 1ac:	c4 c1       	rjmp	.+904    	; 0x536 <_exit>

000001ae <__bad_interrupt>:
 1ae:	28 cf       	rjmp	.-432    	; 0x0 <__vectors>

000001b0 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
 1b0:	08 95       	ret

000001b2 <sysclk_init>:
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
 1b2:	8f ef       	ldi	r24, 0xFF	; 255
 1b4:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
 1b8:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
 1bc:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
 1c0:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
 1c4:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
 1c8:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
 1cc:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>
 1d0:	08 95       	ret

000001d2 <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
 1d2:	1f 92       	push	r1
 1d4:	0f 92       	push	r0
 1d6:	0f b6       	in	r0, 0x3f	; 63
 1d8:	0f 92       	push	r0
 1da:	11 24       	eor	r1, r1
 1dc:	2f 93       	push	r18
 1de:	3f 93       	push	r19
 1e0:	4f 93       	push	r20
 1e2:	5f 93       	push	r21
 1e4:	6f 93       	push	r22
 1e6:	7f 93       	push	r23
 1e8:	8f 93       	push	r24
 1ea:	9f 93       	push	r25
 1ec:	af 93       	push	r26
 1ee:	bf 93       	push	r27
 1f0:	ef 93       	push	r30
 1f2:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
 1f4:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
 1f8:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
 1fc:	e0 91 0b 20 	lds	r30, 0x200B	; 0x80200b <adca_callback>
 200:	f0 91 0c 20 	lds	r31, 0x200C	; 0x80200c <adca_callback+0x1>
 204:	61 e0       	ldi	r22, 0x01	; 1
 206:	80 e0       	ldi	r24, 0x00	; 0
 208:	92 e0       	ldi	r25, 0x02	; 2
 20a:	09 95       	icall
}
 20c:	ff 91       	pop	r31
 20e:	ef 91       	pop	r30
 210:	bf 91       	pop	r27
 212:	af 91       	pop	r26
 214:	9f 91       	pop	r25
 216:	8f 91       	pop	r24
 218:	7f 91       	pop	r23
 21a:	6f 91       	pop	r22
 21c:	5f 91       	pop	r21
 21e:	4f 91       	pop	r20
 220:	3f 91       	pop	r19
 222:	2f 91       	pop	r18
 224:	0f 90       	pop	r0
 226:	0f be       	out	0x3f, r0	; 63
 228:	0f 90       	pop	r0
 22a:	1f 90       	pop	r1
 22c:	18 95       	reti

0000022e <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
 22e:	1f 92       	push	r1
 230:	0f 92       	push	r0
 232:	0f b6       	in	r0, 0x3f	; 63
 234:	0f 92       	push	r0
 236:	11 24       	eor	r1, r1
 238:	2f 93       	push	r18
 23a:	3f 93       	push	r19
 23c:	4f 93       	push	r20
 23e:	5f 93       	push	r21
 240:	6f 93       	push	r22
 242:	7f 93       	push	r23
 244:	8f 93       	push	r24
 246:	9f 93       	push	r25
 248:	af 93       	push	r26
 24a:	bf 93       	push	r27
 24c:	ef 93       	push	r30
 24e:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
 250:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
 254:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
 258:	e0 91 0b 20 	lds	r30, 0x200B	; 0x80200b <adca_callback>
 25c:	f0 91 0c 20 	lds	r31, 0x200C	; 0x80200c <adca_callback+0x1>
 260:	62 e0       	ldi	r22, 0x02	; 2
 262:	80 e0       	ldi	r24, 0x00	; 0
 264:	92 e0       	ldi	r25, 0x02	; 2
 266:	09 95       	icall
}
 268:	ff 91       	pop	r31
 26a:	ef 91       	pop	r30
 26c:	bf 91       	pop	r27
 26e:	af 91       	pop	r26
 270:	9f 91       	pop	r25
 272:	8f 91       	pop	r24
 274:	7f 91       	pop	r23
 276:	6f 91       	pop	r22
 278:	5f 91       	pop	r21
 27a:	4f 91       	pop	r20
 27c:	3f 91       	pop	r19
 27e:	2f 91       	pop	r18
 280:	0f 90       	pop	r0
 282:	0f be       	out	0x3f, r0	; 63
 284:	0f 90       	pop	r0
 286:	1f 90       	pop	r1
 288:	18 95       	reti

0000028a <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
 28a:	1f 92       	push	r1
 28c:	0f 92       	push	r0
 28e:	0f b6       	in	r0, 0x3f	; 63
 290:	0f 92       	push	r0
 292:	11 24       	eor	r1, r1
 294:	2f 93       	push	r18
 296:	3f 93       	push	r19
 298:	4f 93       	push	r20
 29a:	5f 93       	push	r21
 29c:	6f 93       	push	r22
 29e:	7f 93       	push	r23
 2a0:	8f 93       	push	r24
 2a2:	9f 93       	push	r25
 2a4:	af 93       	push	r26
 2a6:	bf 93       	push	r27
 2a8:	ef 93       	push	r30
 2aa:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
 2ac:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
 2b0:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
 2b4:	e0 91 0b 20 	lds	r30, 0x200B	; 0x80200b <adca_callback>
 2b8:	f0 91 0c 20 	lds	r31, 0x200C	; 0x80200c <adca_callback+0x1>
 2bc:	64 e0       	ldi	r22, 0x04	; 4
 2be:	80 e0       	ldi	r24, 0x00	; 0
 2c0:	92 e0       	ldi	r25, 0x02	; 2
 2c2:	09 95       	icall
}
 2c4:	ff 91       	pop	r31
 2c6:	ef 91       	pop	r30
 2c8:	bf 91       	pop	r27
 2ca:	af 91       	pop	r26
 2cc:	9f 91       	pop	r25
 2ce:	8f 91       	pop	r24
 2d0:	7f 91       	pop	r23
 2d2:	6f 91       	pop	r22
 2d4:	5f 91       	pop	r21
 2d6:	4f 91       	pop	r20
 2d8:	3f 91       	pop	r19
 2da:	2f 91       	pop	r18
 2dc:	0f 90       	pop	r0
 2de:	0f be       	out	0x3f, r0	; 63
 2e0:	0f 90       	pop	r0
 2e2:	1f 90       	pop	r1
 2e4:	18 95       	reti

000002e6 <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
 2e6:	1f 92       	push	r1
 2e8:	0f 92       	push	r0
 2ea:	0f b6       	in	r0, 0x3f	; 63
 2ec:	0f 92       	push	r0
 2ee:	11 24       	eor	r1, r1
 2f0:	2f 93       	push	r18
 2f2:	3f 93       	push	r19
 2f4:	4f 93       	push	r20
 2f6:	5f 93       	push	r21
 2f8:	6f 93       	push	r22
 2fa:	7f 93       	push	r23
 2fc:	8f 93       	push	r24
 2fe:	9f 93       	push	r25
 300:	af 93       	push	r26
 302:	bf 93       	push	r27
 304:	ef 93       	push	r30
 306:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
 308:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
 30c:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
 310:	e0 91 0b 20 	lds	r30, 0x200B	; 0x80200b <adca_callback>
 314:	f0 91 0c 20 	lds	r31, 0x200C	; 0x80200c <adca_callback+0x1>
 318:	68 e0       	ldi	r22, 0x08	; 8
 31a:	80 e0       	ldi	r24, 0x00	; 0
 31c:	92 e0       	ldi	r25, 0x02	; 2
 31e:	09 95       	icall
}
 320:	ff 91       	pop	r31
 322:	ef 91       	pop	r30
 324:	bf 91       	pop	r27
 326:	af 91       	pop	r26
 328:	9f 91       	pop	r25
 32a:	8f 91       	pop	r24
 32c:	7f 91       	pop	r23
 32e:	6f 91       	pop	r22
 330:	5f 91       	pop	r21
 332:	4f 91       	pop	r20
 334:	3f 91       	pop	r19
 336:	2f 91       	pop	r18
 338:	0f 90       	pop	r0
 33a:	0f be       	out	0x3f, r0	; 63
 33c:	0f 90       	pop	r0
 33e:	1f 90       	pop	r1
 340:	18 95       	reti

00000342 <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
 342:	cf 93       	push	r28
 344:	df 93       	push	r29
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
 346:	e0 91 00 20 	lds	r30, 0x2000	; 0x802000 <__data_end>
 34a:	f0 91 01 20 	lds	r31, 0x2001	; 0x802001 <__data_end+0x1>
 34e:	84 81       	ldd	r24, Z+4	; 0x04

	if (master_status & TWI_MASTER_ARBLOST_bm) {
 350:	83 ff       	sbrs	r24, 3
 352:	08 c0       	rjmp	.+16     	; 0x364 <twim_interrupt_handler+0x22>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
 354:	88 60       	ori	r24, 0x08	; 8
 356:	84 83       	std	Z+4, r24	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
 358:	83 e0       	ldi	r24, 0x03	; 3
 35a:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_BUSY;
 35c:	86 ef       	ldi	r24, 0xF6	; 246
 35e:	80 93 0a 20 	sts	0x200A, r24	; 0x80200a <__data_end+0xa>
 362:	83 c0       	rjmp	.+262    	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
 364:	98 2f       	mov	r25, r24
 366:	94 71       	andi	r25, 0x14	; 20
 368:	31 f0       	breq	.+12     	; 0x376 <twim_interrupt_handler+0x34>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
 36a:	83 e0       	ldi	r24, 0x03	; 3
 36c:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_IO_ERROR;
 36e:	8f ef       	ldi	r24, 0xFF	; 255
 370:	80 93 0a 20 	sts	0x200A, r24	; 0x80200a <__data_end+0xa>
 374:	7a c0       	rjmp	.+244    	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>

	} else if (master_status & TWI_MASTER_WIF_bm) {
 376:	86 ff       	sbrs	r24, 6
 378:	43 c0       	rjmp	.+134    	; 0x400 <__LOCK_REGION_LENGTH__>
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
 37a:	c0 e0       	ldi	r28, 0x00	; 0
 37c:	d0 e2       	ldi	r29, 0x20	; 32
 37e:	aa 81       	ldd	r26, Y+2	; 0x02
 380:	bb 81       	ldd	r27, Y+3	; 0x03

	if (transfer.addr_count < pkg->addr_length) {
 382:	8c 81       	ldd	r24, Y+4	; 0x04
 384:	9d 81       	ldd	r25, Y+5	; 0x05
 386:	14 96       	adiw	r26, 0x04	; 4
 388:	2d 91       	ld	r18, X+
 38a:	3c 91       	ld	r19, X
 38c:	15 97       	sbiw	r26, 0x05	; 5
 38e:	82 17       	cp	r24, r18
 390:	93 07       	cpc	r25, r19
 392:	6c f4       	brge	.+26     	; 0x3ae <twim_interrupt_handler+0x6c>

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];
 394:	9c 01       	movw	r18, r24
 396:	2f 5f       	subi	r18, 0xFF	; 255
 398:	3f 4f       	sbci	r19, 0xFF	; 255
 39a:	20 93 04 20 	sts	0x2004, r18	; 0x802004 <__data_end+0x4>
 39e:	30 93 05 20 	sts	0x2005, r19	; 0x802005 <__data_end+0x5>
 3a2:	a8 0f       	add	r26, r24
 3a4:	b9 1f       	adc	r27, r25
 3a6:	11 96       	adiw	r26, 0x01	; 1
 3a8:	8c 91       	ld	r24, X
 3aa:	87 83       	std	Z+7, r24	; 0x07
 3ac:	5e c0       	rjmp	.+188    	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>

	} else if (transfer.data_count < pkg->length) {
 3ae:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <__data_end+0x6>
 3b2:	90 91 07 20 	lds	r25, 0x2007	; 0x802007 <__data_end+0x7>
 3b6:	18 96       	adiw	r26, 0x08	; 8
 3b8:	2d 91       	ld	r18, X+
 3ba:	3c 91       	ld	r19, X
 3bc:	19 97       	sbiw	r26, 0x09	; 9
 3be:	82 17       	cp	r24, r18
 3c0:	93 07       	cpc	r25, r19
 3c2:	c8 f4       	brcc	.+50     	; 0x3f6 <twim_interrupt_handler+0xb4>

		if (transfer.read) {
 3c4:	20 91 08 20 	lds	r18, 0x2008	; 0x802008 <__data_end+0x8>
 3c8:	22 23       	and	r18, r18
 3ca:	21 f0       	breq	.+8      	; 0x3d4 <twim_interrupt_handler+0x92>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
 3cc:	86 81       	ldd	r24, Z+6	; 0x06
 3ce:	81 60       	ori	r24, 0x01	; 1
 3d0:	86 83       	std	Z+6, r24	; 0x06
 3d2:	4b c0       	rjmp	.+150    	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>

		} else {
			const uint8_t * const data = pkg->buffer;
 3d4:	16 96       	adiw	r26, 0x06	; 6
 3d6:	2d 91       	ld	r18, X+
 3d8:	3c 91       	ld	r19, X
 3da:	17 97       	sbiw	r26, 0x07	; 7
			bus->MASTER.DATA = data[transfer.data_count++];
 3dc:	ac 01       	movw	r20, r24
 3de:	4f 5f       	subi	r20, 0xFF	; 255
 3e0:	5f 4f       	sbci	r21, 0xFF	; 255
 3e2:	40 93 06 20 	sts	0x2006, r20	; 0x802006 <__data_end+0x6>
 3e6:	50 93 07 20 	sts	0x2007, r21	; 0x802007 <__data_end+0x7>
 3ea:	d9 01       	movw	r26, r18
 3ec:	a8 0f       	add	r26, r24
 3ee:	b9 1f       	adc	r27, r25
 3f0:	8c 91       	ld	r24, X
 3f2:	87 83       	std	Z+7, r24	; 0x07
 3f4:	3a c0       	rjmp	.+116    	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
 3f6:	83 e0       	ldi	r24, 0x03	; 3
 3f8:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = STATUS_OK;
 3fa:	10 92 0a 20 	sts	0x200A, r1	; 0x80200a <__data_end+0xa>
 3fe:	35 c0       	rjmp	.+106    	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
 400:	88 23       	and	r24, r24
 402:	84 f5       	brge	.+96     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
 404:	a0 e0       	ldi	r26, 0x00	; 0
 406:	b0 e2       	ldi	r27, 0x20	; 32
 408:	12 96       	adiw	r26, 0x02	; 2
 40a:	cd 91       	ld	r28, X+
 40c:	dc 91       	ld	r29, X
 40e:	13 97       	sbiw	r26, 0x03	; 3

	if (transfer.data_count < pkg->length) {
 410:	16 96       	adiw	r26, 0x06	; 6
 412:	8d 91       	ld	r24, X+
 414:	9c 91       	ld	r25, X
 416:	17 97       	sbiw	r26, 0x07	; 7
 418:	28 85       	ldd	r18, Y+8	; 0x08
 41a:	39 85       	ldd	r19, Y+9	; 0x09
 41c:	82 17       	cp	r24, r18
 41e:	93 07       	cpc	r25, r19
 420:	d8 f4       	brcc	.+54     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>

		uint8_t * const data = pkg->buffer;
 422:	6e 81       	ldd	r22, Y+6	; 0x06
 424:	7f 81       	ldd	r23, Y+7	; 0x07
		data[transfer.data_count++] = bus->MASTER.DATA;
 426:	9c 01       	movw	r18, r24
 428:	2f 5f       	subi	r18, 0xFF	; 255
 42a:	3f 4f       	sbci	r19, 0xFF	; 255
 42c:	20 93 06 20 	sts	0x2006, r18	; 0x802006 <__data_end+0x6>
 430:	30 93 07 20 	sts	0x2007, r19	; 0x802007 <__data_end+0x7>
 434:	47 81       	ldd	r20, Z+7	; 0x07
 436:	db 01       	movw	r26, r22
 438:	a8 0f       	add	r26, r24
 43a:	b9 1f       	adc	r27, r25
 43c:	4c 93       	st	X, r20

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
 43e:	88 85       	ldd	r24, Y+8	; 0x08
 440:	99 85       	ldd	r25, Y+9	; 0x09
 442:	28 17       	cp	r18, r24
 444:	39 07       	cpc	r19, r25
 446:	18 f4       	brcc	.+6      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
 448:	82 e0       	ldi	r24, 0x02	; 2
 44a:	83 83       	std	Z+3, r24	; 0x03
 44c:	0e c0       	rjmp	.+28     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
 44e:	87 e0       	ldi	r24, 0x07	; 7
 450:	83 83       	std	Z+3, r24	; 0x03
			transfer.status = STATUS_OK;
 452:	10 92 0a 20 	sts	0x200A, r1	; 0x80200a <__data_end+0xa>
 456:	09 c0       	rjmp	.+18     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
 458:	83 e0       	ldi	r24, 0x03	; 3
 45a:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_NO_MEMORY;
 45c:	89 ef       	ldi	r24, 0xF9	; 249
 45e:	80 93 0a 20 	sts	0x200A, r24	; 0x80200a <__data_end+0xa>
 462:	03 c0       	rjmp	.+6      	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
 464:	8b ef       	ldi	r24, 0xFB	; 251
 466:	80 93 0a 20 	sts	0x200A, r24	; 0x80200a <__data_end+0xa>
	}
}
 46a:	df 91       	pop	r29
 46c:	cf 91       	pop	r28
 46e:	08 95       	ret

00000470 <__vector_13>:
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
 470:	1f 92       	push	r1
 472:	0f 92       	push	r0
 474:	0f b6       	in	r0, 0x3f	; 63
 476:	0f 92       	push	r0
 478:	11 24       	eor	r1, r1
 47a:	2f 93       	push	r18
 47c:	3f 93       	push	r19
 47e:	4f 93       	push	r20
 480:	5f 93       	push	r21
 482:	6f 93       	push	r22
 484:	7f 93       	push	r23
 486:	8f 93       	push	r24
 488:	9f 93       	push	r25
 48a:	af 93       	push	r26
 48c:	bf 93       	push	r27
 48e:	ef 93       	push	r30
 490:	ff 93       	push	r31
 492:	57 df       	rcall	.-338    	; 0x342 <twim_interrupt_handler>
 494:	ff 91       	pop	r31
 496:	ef 91       	pop	r30
 498:	bf 91       	pop	r27
 49a:	af 91       	pop	r26
 49c:	9f 91       	pop	r25
 49e:	8f 91       	pop	r24
 4a0:	7f 91       	pop	r23
 4a2:	6f 91       	pop	r22
 4a4:	5f 91       	pop	r21
 4a6:	4f 91       	pop	r20
 4a8:	3f 91       	pop	r19
 4aa:	2f 91       	pop	r18
 4ac:	0f 90       	pop	r0
 4ae:	0f be       	out	0x3f, r0	; 63
 4b0:	0f 90       	pop	r0
 4b2:	1f 90       	pop	r1
 4b4:	18 95       	reti

000004b6 <__vector_46>:
#endif
#ifdef TWID
ISR(TWID_TWIM_vect) { twim_interrupt_handler(); }
#endif
#ifdef TWIE
ISR(TWIE_TWIM_vect) { twim_interrupt_handler(); }
 4b6:	1f 92       	push	r1
 4b8:	0f 92       	push	r0
 4ba:	0f b6       	in	r0, 0x3f	; 63
 4bc:	0f 92       	push	r0
 4be:	11 24       	eor	r1, r1
 4c0:	2f 93       	push	r18
 4c2:	3f 93       	push	r19
 4c4:	4f 93       	push	r20
 4c6:	5f 93       	push	r21
 4c8:	6f 93       	push	r22
 4ca:	7f 93       	push	r23
 4cc:	8f 93       	push	r24
 4ce:	9f 93       	push	r25
 4d0:	af 93       	push	r26
 4d2:	bf 93       	push	r27
 4d4:	ef 93       	push	r30
 4d6:	ff 93       	push	r31
 4d8:	34 df       	rcall	.-408    	; 0x342 <twim_interrupt_handler>
 4da:	ff 91       	pop	r31
 4dc:	ef 91       	pop	r30
 4de:	bf 91       	pop	r27
 4e0:	af 91       	pop	r26
 4e2:	9f 91       	pop	r25
 4e4:	8f 91       	pop	r24
 4e6:	7f 91       	pop	r23
 4e8:	6f 91       	pop	r22
 4ea:	5f 91       	pop	r21
 4ec:	4f 91       	pop	r20
 4ee:	3f 91       	pop	r19
 4f0:	2f 91       	pop	r18
 4f2:	0f 90       	pop	r0
 4f4:	0f be       	out	0x3f, r0	; 63
 4f6:	0f 90       	pop	r0
 4f8:	1f 90       	pop	r1
 4fa:	18 95       	reti

000004fc <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
 4fc:	04 c0       	rjmp	.+8      	; 0x506 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
 4fe:	61 50       	subi	r22, 0x01	; 1
 500:	71 09       	sbc	r23, r1
 502:	81 09       	sbc	r24, r1
 504:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
 506:	61 15       	cp	r22, r1
 508:	71 05       	cpc	r23, r1
 50a:	81 05       	cpc	r24, r1
 50c:	91 05       	cpc	r25, r1
 50e:	b9 f7       	brne	.-18     	; 0x4fe <__portable_avr_delay_cycles+0x2>
 510:	08 95       	ret

00000512 <main>:
#define LED0 IOPORT_CREATE_PIN(PORTB, 14)

int main(void)
{
	/* Insert system clock initialization code here (sysclk_init()). */
	sysclk_init();
 512:	4f de       	rcall	.-866    	; 0x1b2 <sysclk_init>
	board_init();
 514:	4d de       	rcall	.-870    	; 0x1b0 <board_init>
 516:	e0 e4       	ldi	r30, 0x40	; 64
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
 518:	f6 e0       	ldi	r31, 0x06	; 6
 51a:	80 e4       	ldi	r24, 0x40	; 64
 51c:	81 83       	std	Z+1, r24	; 0x01
 51e:	85 83       	std	Z+5, r24	; 0x05
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
 520:	00 e4       	ldi	r16, 0x40	; 64

__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	base->OUTTGL = arch_ioport_pin_to_mask(pin);
 522:	16 e0       	ldi	r17, 0x06	; 6
 524:	c0 e4       	ldi	r28, 0x40	; 64
 526:	f8 01       	movw	r30, r16
 528:	c7 83       	std	Z+7, r28	; 0x07
 52a:	66 e1       	ldi	r22, 0x16	; 22
    
	/* Insert application code here, after the board has been initialized. */ 
    while (1) 
    {
		ioport_toggle_pin_level(LED0);
		delay_ms(1000);
 52c:	76 e1       	ldi	r23, 0x16	; 22
 52e:	85 e0       	ldi	r24, 0x05	; 5
 530:	90 e0       	ldi	r25, 0x00	; 0
 532:	e4 df       	rcall	.-56     	; 0x4fc <__portable_avr_delay_cycles>
 534:	f8 cf       	rjmp	.-16     	; 0x526 <main+0x14>

00000536 <_exit>:
 536:	f8 94       	cli

00000538 <__stop_program>:
 538:	ff cf       	rjmp	.-2      	; 0x538 <__stop_program>
